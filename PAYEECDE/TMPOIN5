     H COPYRIGHT(' Copyright Silverlake System Sdn. Bhd. 1993, 2007          ')
     H DFTACTGRP(*NO)
     H ACTGRP(*CALLER)
     H BNDDIR('TMBNDDIR')
     H FIXNBR(*ZONED:*INPUTPACKED)
     H CVTOPT(*VARCHAR)
     H
      **************************************************************************
      *                                                                        *
      *   Program Name : TMPOIN5                                               *
      *‚  Description  : Multi Account Inquiry Handler                         *
      *‚                                                                       *
      *                                                                        *
      *   TMPOIN5     IS A PART OF THE SILVERLAKE SYSTEM(R)                    *
      *              (C) Copyright Silverlake System Sdn. Bhd. 2006.           *
      *                 By:  Silverlake System Sdn. Bhd.                       *
      *                      Floor 12A, Plaza IBM,                             *
      *                      No.1, Jalan Tun Mohd Fuad,                        *
      *                      Taman Tun Dr. Ismail,                             *
      *                      60000 Kuala Lumpur, Malaysia                      *
      *                                                                        *
      **************************************************************************
      *  Created by     :  Darren                                              *
      *  Date           :  09/01/2007                                          *
      **************************************************************************
      * Modification Logs:                                                     *
      * ==================                                                     *
      * Init  Ref      Date      Description                                   *
      * ----  ----   ----------  --------------------------------------------- *
      * DAR   DB01   06/09/07    Retrieve customer name via account level.     *
      **************************************************************************
      * CIMB                                                                   *
      * -----                                                                  *
      * LSH   SS02   30/10/09    Added Country of Citizenship                  *
      *‚LKH   M200   25/07/12    Enhancement for multiple acct inquiry for     *
      *‚                         Bank Trade on T6 response                     *
      * James M202   14/08/13    Mask Salary Account when CFMACD <> ' '        *
      *                          instead of 'A'  (UAT:8328)                    *
      **************************************************************************
      * CIMB NIAGA                                                             *
      * -----                                                                  *
      * James M300   18/12/14    Add New Response TMQ1B for country specific   *
      *                          Response                                      *
      *                          Retrieve Account name from CFNAME Pgm         *
      *                                                                        *
      * SVL002025    05/04/17    Customer Alert (Alert VIP Flag)               *
      *                          Add value to T6 filler field as VIP Alert     *
      *                          Search: S2025                                 *
      * DNAR  4062   08/03/21    SVL004062 BDS - Revams                        *
      *                            - Enhancement of Biller Name and ATM Vendor *
      *                              TACNM1 = CIF Name + Account Name          *
      **************************************************************************
      * File Specification
      *------------------------------------------------------------------
     FTLEDT     IF   E             DISK
     FTLTEL     IF   E           K DISK
     FTLTXAV    IF   E           K DISK
     FTLTX      IF   E           K DISK
     FTLTXED    IF   E           K DISK
M200 FICMSGL    O    E             DISK    USROPN BLOCK(*YES)
     FTMFMSG    IF   E           K DISK
     FTMHANPGM  IF   E           K DISK
     FDDPAR1    IF   E             DISK
     FTLLOG     O    E             DISK
M200 FTLLOGA    O    E             DISK
M200 FTLLOGAD   O    E             DISK
     FCFACCTL1  IF   E           K DISK
     FCFACCTL4  IF   E           K DISK    RENAME(RCFACCT:RCFACT4)
     FCFAGRP    IF   E           K DISK
     FCFMAST    IF   E           K DISK
     FCDMAST    IF   E           K DISK
     FCDTNEW    IF   E           K DISK    RENAME(RCDMAST:RCDTNEW)
M200 FCDMASTLG  IF   E           K DISK    prefix(m_) Rename(RCDMAST:RCDMSLG)
M200 FCDTNEWL2  IF   E           K DISK    prefix(m_) Rename(RCDMAST:RCDTNL2)
M200 FCDGMST    IF   E           K DISK
M200 FCDDISP    IF   E           K DISK
M2010FCFADDR    IF   E           K DISK
SNY  FDDMAST    IF   E           K DISK
SNY  FDDTNEW    IF   E           K DISK    RENAME(RDDMAST:RDDTNEW)
SNY  FLNMAST    IF   E           K DISK
SNY  FLNTNEW    IF   E           K DISK    RENAME(RLNMAST:RLNTNEW)
     FSSDATA    IF   E           K DISK
     FTLCTLU    IF   E           K DISK
M200 FDDMEMO    IF   E           K DISK
M200 FCDMEMO    IF   E           K DISK
M200 FLNMEMO    IF   E           K DISK
M200 FDDASTS    IF   E           K DISK    RENAME(RTLASTS:RDDASTS)
M200 FLNASTS    IF   E           K DISK    RENAME(RTLASTS:RLNASTS)
M200 FTLASDS    IF   E           K DISK
M200 FTLASTSPAR IF   E           K DISK
M200 FTLTXEXT   IF   E           K DISK
M200 FSSINDX    IF   E           K DISK
M200 FSSINDXL1  IF   E           K DISK    RENAME(RSSINDX:RSSINDXL1)
M200 FDDTRXTL1  IF   E           K DISK
M200 FDDPAR31   IF   E           K DISK
M200 FDDGCTML1  IF   E           K DISK
M200 FTMFPAR5   IF   E           K DISK
M200 FSDMAST    IF   E           K DISK    Prefix(SD_)
M200 FSDTNEW    IF   E           K DISK    RENAME(RSDMAST:RSDTNEW) Prefix(SD_)
M200 FSDMEMO    IF   E           K DISK    Prefix(SD_)
M200 FLNSCGC    IF   E           K DISK
M200 FLNAUCT    IF   E           K DISK
M200 FUTMAST    IF   E           K DISK    Prefix(UT_)
4062 FINIISPPM  IF   E           K DISK    Prefix(IS_)
      *
     ‚* Data structure for all responses
M200ˆD/COPY QTLSCOPY,TMQMSGHD1
      *
     š**************************************************************************
      *‚Data Structures
     š**************************************************************************
     ‚* Sub Error Codes work Parm List entries
     D osErrAr         s              3p 0 Dim(30) Inz
     D osErrty         s              1    Dim(30) Inz
     D osErTxt         s             60    Dim(30) Inz
     D ErrArr          s              3p 0 Dim(15) Inz
     D EroArr          s              1    Dim(15) Inz

     ‚* Array For TMQLDEDT
TEMP D ERD             S             30    DIM(930)
TEMP D AFO             S              1    DIM(930)
TEMP D ACO             S              1    DIM(930)
     ‚* Array for TMQMFTO
    ˜D CU              S              1    DIM(45)
     D GCU             S              1    DIM(30)
     D OTCD            S              1    DIM(30)
      *
M200 D CHGTYP          S                   LIKE(TLBID)
M200 D OTCAMT          S                   LIKE(T8CHMIN1)
M200 D OTCMMT          S                   LIKE(T8CHMAX1)
M200 D OTCONT          S                   LIKE(T8LIMT1)
M200 D ERRORC          S                   LIKE(T6TBKORST)
M200 D S_OACN          S                   LIKE(SSOACN)
M200 D S_OACN1         S                   LIKE(SSOACN)
M200 D S_NACN          S                   LIKE(SSNACN)
M200 D K_ACCT          S             30
M200 D cls_NETSETT     S                   LIKE(CBAL)
M200 D cls_PENINT      S                   LIKE(CBAL)
M200 D cls_SECACR      S                   LIKE(CBAL)
M200 D cls_WHTDY       S                   LIKE(WHTDY)
M200 D cls_PAYOFF      S                   LIKE(CBAL)
M200 D cls_FeeCod1     S                   LIKE(TLBID)
M200 D cls_FeeCod2     S                   LIKE(TLBID)
M200 D cls_FeeCod3     S                   LIKE(TLBID)
M200 D cls_FeeAmt1     S                   LIKE(CBAL)
M200 D cls_FeeAmt2     S                   LIKE(CBAL)
M200 D cls_FeeAmt3     S                   LIKE(CBAL)
M200 D cls_FEEGLA1     S                   LIKE(ACCTNO)
M200 D cls_FEEGLA2     S                   LIKE(ACCTNO)
M200 D cls_FEEGLA3     S                   LIKE(ACCTNO)
M200 D cls_FEEVAT1     S                   LIKE(CBAL)
M200 D cls_FEEVAT2     S                   LIKE(CBAL)
M200 D cls_FEEVAT3     S                   LIKE(CBAL)
M200 D cls_FEESBT1     S                   LIKE(ACTYPE)
M200 D cls_FEESBT2     S                   LIKE(ACTYPE)
M200 D cls_FEESBT3     S                   LIKE(ACTYPE)
M200 D ACR112          S                   LIKE(CBAL)
M200 D ODDLIM          S                   LIKE(CBAL)
M300 D IN_PGMRATE      S                   LIKE(RATE)
M300 D IN_PRDRAT       S                   LIKE(RATE)
M200 D cls_ZAKATI      S                   LIKE(CBAL)
M200 D cls_FeeCod4     S                   LIKE(TLBID)
M200 D cls_FeeCod5     S                   LIKE(TLBID)
M200 D cls_FeeCod6     S                   LIKE(TLBID)
M200 D cls_FeeCod7     S                   LIKE(TLBID)
M200 D cls_FeeAmt4     S                   LIKE(CBAL)
M200 D cls_FeeAmt5     S                   LIKE(CBAL)
M200 D cls_FeeAmt6     S                   LIKE(CBAL)
M200 D cls_FeeAmt7     S                   LIKE(CBAL)
M200 D cls_FEEGLA4     S                   LIKE(ACCTNO)
M200 D cls_FEEGLA5     S                   LIKE(ACCTNO)
M200 D cls_FEEGLA6     S                   LIKE(ACCTNO)
M200 D cls_FEEGLA7     S                   LIKE(ACCTNO)
M200 D cls_FEEVAT4     S                   LIKE(CBAL)
M200 D cls_FEEVAT5     S                   LIKE(CBAL)
M200 D cls_FEEVAT6     S                   LIKE(CBAL)
M200 D cls_FEEVAT7     S                   LIKE(CBAL)
M200 D cls_FEESBT4     S                   LIKE(ACTYPE)
M200 D cls_FEESBT5     S                   LIKE(ACTYPE)
M200 D cls_FEESBT6     S                   LIKE(ACTYPE)
M200 D cls_FEESBT7     S                   LIKE(ACTYPE)
      * Array for TMQT8 and TMQT0
M200 D ACTN            S                   DIM(12) LIKE(ACCTNO)
M200 D ATYE            S                   DIM(12) LIKE(ACTYPE)
M200 D IDX1            S                   DIM(12) LIKE(T8INDX1)
M200 D COD1            S                   DIM(12) LIKE(TLBCH1G)
M200 D MIN1            S                   DIM(12) LIKE(T8CHMIN1)
M200 D MAX1            S                   DIM(12) LIKE(T8CHMAX1)
M200 D CUR1            S                   DIM(12) LIKE(DDCTYP)
M200 D LMT1            S                   DIM(12) LIKE(T8LIMT1)
M200 D FLD1            S                   DIM(12) LIKE(T0FNAME1)
M200 D VLE1            S                   DIM(12) LIKE(T0VALUE1)
M200 D IDX2            S                   DIM(12) LIKE(T8INDX1)
M200 D COD2            S                   DIM(12) LIKE(TLBCH1G)
M200 D MIN2            S                   DIM(12) LIKE(T8CHMIN1)
M200 D MAX2            S                   DIM(12) LIKE(T8CHMAX1)
M200 D CUR2            S                   DIM(12) LIKE(DDCTYP)
M200 D LMT2            S                   DIM(12) LIKE(T8LIMT1)
M200 D FLD2            S                   DIM(12) LIKE(T0FNAME2)
M200 D VLE2            S                   DIM(12) LIKE(T0VALUE2)
M200 D IDX3            S                   DIM(12) LIKE(T8INDX1)
M200 D COD3            S                   DIM(12) LIKE(TLBCH1G)
M200 D MIN3            S                   DIM(12) LIKE(T8CHMIN1)
M200 D MAX3            S                   DIM(12) LIKE(T8CHMAX1)
M200 D CUR3            S                   DIM(12) LIKE(DDCTYP)
M200 D LMT3            S                   DIM(12) LIKE(T8LIMT1)
M200 D FLD3            S                   DIM(12) LIKE(T0FNAME3)
M200 D VLE3            S                   DIM(12) LIKE(T0VALUE3)
M200 D IDX4            S                   DIM(12) LIKE(T8INDX1)
M200 D COD4            S                   DIM(12) LIKE(TLBCH1G)
M200 D MIN4            S                   DIM(12) LIKE(T8CHMIN1)
M200 D MAX4            S                   DIM(12) LIKE(T8CHMAX1)
M200 D CUR4            S                   DIM(12) LIKE(DDCTYP)
M200 D LMT4            S                   DIM(12) LIKE(T8LIMT1)
M200 D FLD4            S                   DIM(12) LIKE(T0FNAME4)
M200 D VLE4            S                   DIM(12) LIKE(T0VALUE4)
M200 D IDX5            S                   DIM(12) LIKE(T8INDX1)
M200 D COD5            S                   DIM(12) LIKE(TLBCH1G)
M200 D MIN5            S                   DIM(12) LIKE(T8CHMIN1)
M200 D MAX5            S                   DIM(12) LIKE(T8CHMAX1)
M200 D CUR5            S                   DIM(12) LIKE(DDCTYP)
M200 D LMT5            S                   DIM(12) LIKE(T8LIMT1)
M200 D FLD5            S                   DIM(12) LIKE(T0FNAME5)
M200 D VLE5            S                   DIM(12) LIKE(T0VALUE5)
M200 D IDXn            S                   DIM(5) LIKE(T8INDX1)
M200 D CODn            S                   DIM(5) LIKE(TLBCH1G)
M200 D MINn            S                   DIM(5) LIKE(T8CHMIN1)
M200 D MAXn            S                   DIM(5) LIKE(T8CHMAX1)
M200 D CURn            S                   DIM(5) LIKE(DDCTYP)
M200 D LMTn            S                   DIM(5) LIKE(T8LIMT1)
M200 D FLDn            S                   DIM(5) LIKE(T0FNAME1)
M200 D VLEn            S                   DIM(5) LIKE(T0VALUE1)
     ‚* COUNTER
     DSNDRCVCNT        S              2  0
      *
BP01˜D MSGBRK          S           3990    INZ
HSM01D  TIMESTMP       DS
  :  D    TIMEST               1      8S 0
  :  D     WHR                 1      2S 0
  :  D     WMN                 3      4S 0
  :  D     WSC                 5      6S 0
  :  D     WMSC                7      8S 0
  :
  :  D DSMIL_SEC       DS
  :  D    MMSEC                1      6
  :  D     WMM1                1      2  0
  :  D     WMM2                3      6  0
  :  D
  :  D  MIL_SECS       S              6S 0
HSM01D  SYSTIME        S               Z
     D wkTime          S              8s 0 INZ
4062 D sSeparator      S             20
      *
     ‚* Data Area Containing Master Codes
      *
     D TLMAST        E DS                  EXTNAME(TLMAST)
      *
     ‚* Data Area Containing ICF Codes
     D ICMAST        E DS                  EXTNAME(ICMAST)
      *
     ‚* Parameter List for TMSGTACTN
     D TMQDSGTACN    E DS                  EXTNAME(TMQDSGTACN)

     D               EUDS                  EXTNAME(SSAPAR)
      *
     D                 DS
     D  DATE1                  1      4B 0
     D  DATEB1                 2      4
     D  DATE2                  5      8B 0
     D  DATEB2                 6      8

     ‚* Program Status Data Structure
     D                SDS
     D  PSPGM                  1     10
     D  PSSTS                 11     15
     D  PSSRCSEQ              21     28
     D  PSMSG                 40     46
     D  PSJOB                244    253
     D  PSUSRN               254    263
     D  PSJOBNUM             264    269S 0
     D  PSPGMDAT             276    281
     D  PSPGMTIM             282    287
     D  XYZ                    1   1000
      *
M200 DICFDS          E DS                  EXTNAME(TMQICFDS)
M200 D* ICFDS          E DS                  EXTNAME(TMQICFDS2)
     D  RSVFLD                66     70
     D                                     DIM(5)
      *
M200 D TLASTSDS      E DS                  EXTNAME(TLASTS) INZ
M200 D AS                     12    110    DIM(99)
M200 D               E DS                  EXTNAME(TLASDS)
M200 D HDS                   300   3269    DIM(99)

     D/COPY QTLSREFRLE,TMQDS2
     D/COPY QTLSREFRLE,TMQDS4
     D/COPY QTLSREFRLE,TMQDS5
     D/COPY QTLSREFRLE,TMQDS7
     D/COPY QTLSREFRLE,TMQDS15
     D/COPY QTLSREFRLE,TMQDS10
M200 D/COPY QTLSREFRLE,TMQDS35
M200 D/COPY QTLSREFRLE,TMQDS32
M200 D/COPY QTLSREFRLE,TMQDS6
      *
     ‚* Define Error Display Usage
     D                 DS
     D  ED                     1    930
     D  TLXEDT                 1    930
      *
     D TLBUFF        E DS                  EXTNAME(TLLOG  ) INZ
     D/COPY QTLSREFRLE,TMQDSBUFF
      *
     D  ACCNDS         DS
     D   HEADR                 1     10
     D   ACTY                 11     40    DIM(30)
      *
M200 D  VECHDS         DS
M200 D   HEADR2                1     10
M200 D   VECHNO               11     35
      *
M200 D  DSCTLUNT       DS
M200 D   T1CUD                             LIKE(TLCTL  )
M200 D   T1ALCUD                           LIKE(TLALCTL)

M300 D DS_CFAGRP     E DS                  EXTNAME(CFAGRP) INZ
M300 D  G_ACCTNO     E                     EXTFLD(ACCTNO)
M300 D  G_Actype     E                     EXTFLD(Actype)
M300 D  G_CFATYP     E                     EXTFLD(CFATYP)

M200 D  DSCFNAM        DS
M200 D   DSNam                 1    200
M200 D   DSNam1                1     80
M200 D   DSNam2                1    120

M300 D DS_DDMAST     E DS                  EXTNAME(DDMAST) INZ

     ‚*Error Code Logging
     DTLXERRBUF      E DS                  EXTNAME(TLLOGA) INZ
     D/COPY QTLSREFRLE,TMQDSERBF
     š*----------------------------------------------------------------------*
     ‚*Sub Error Code - Holding/work variables
     D SBAP            S              2    Dim(50) Inz
     D SBCD            S              3p 0 Dim(50) Inz
     D SBMSG           S             60    Dim(50) Inz
     D wERRAPP         S              2    Inz
     š*----------------------------------------------------------------------*
      *
     š**************************************************************************
      *‚Constant Fields
     š**************************************************************************
      * For Account status Rejection
M200 D ACT_STAT        S              2    Dim(5)
      * For Looping Purpose
     D CMAX            S              4  0 INZ(10)
     D COUNTR          S              4  0 INZ( 0)
M200 D CMAX1           S              2  0 INZ(12)
M200 D COUNTR1         S              4  0 INZ( 0)
M200 D CFLAG           S              1    INZ('N')
M200 D C_OTCAMT        S                   LIKE(OTCAMT)
M200 D C_OTCMMT        S                   LIKE(OTCMMT)
M200 D C_OTCONT        S                   LIKE(OTCONT)
M200 D C_OTHTRN        S              3  0
M200 D C_OTIFCC        S              3  0
M200 D C_ERRORC        S              1
M200 D L_ODDLIM        S                   LIKE(CBAL)
M200 D L_ODCBAL        S                   LIKE(CBAL)
M200 D L_PAYOFF        S                   LIKE(CBAL)
M200 D L_AUTLIM        S                   LIKE(CBAL)
M200 D C_RUNOPT        S              8
M200 D wIntOS          S                   LIKE(BILINT)
M200 D GrpTYPE         S              1    INZ('T')
M200 D wkACUR          S                   LIKE(woACUR)
      * For CFNAME
M300 D  RNA1           S            200
M300 D  RNA2           S            200
M300 D  RNA3           S            200
M300 D  RNA4           S            200
M300 D  RNA5           S            200
M300 D  RNA6           S            200
M300 D  RNA7           S            200
M300 D  RNA8           S            200
M300 D  RNA9           S            200
M300 D  INDICATOR      S              1
M300 D  REQUET         S              8

M200 D SSRTVCRG        PR                  EXTPGM('SSRTVCRG')
M200 D C_TLCBKNO                           LIKE(TLCBKNO)
M200 D C_TLSAPP                            LIKE(TLSAPP)
M200 D C_CHGTYP                            LIKE(CHGTYP)
M200 D C_wkACUR                            LIKE(woACUR)
M200 D C_SCTYPE                            LIKE(SCTYPE)
M200 D C_ACCTNO                            LIKE(ACCTNO)
M200 D C_ACTYPE                            LIKE(ACTYPE)
M200 D C_CFUSTF                            LIKE(CFUSTF)
M200 D C_CFSEGC                            LIKE(CFSEGC)
M200 D C_OTCAMT                            LIKE(OTCAMT)
M200 D C_OTCMMT                            LIKE(OTCMMT)
M200 D C_OTCONT                            LIKE(OTCONT)
M200 D C_OTHTRN                       3  0
M200 D C_OTIFCC                       3  0
M200 D C_ERRORC                       1
      *
M200 D LL1113          PR                  EXTPGM('LL1113')
M200 D L_ACCTNO                            LIKE(ACCTNO)
M200 D L_ACTYPE                            LIKE(ACTYPE)
M200 D L_ODDLIM                            LIKE(CBAL)
M200 D L_ODCBAL                            LIKE(CBAL)
M200 D L_PAYOFF                            LIKE(CBAL)
M200 D L_AUTLIM                            LIKE(CBAL)
M200 D C_RUNOPT                       8
M200 D C_ERRORC                       1
      *
SS02 D/COPY QTLSREFRLE,TMQDSTIM
      *
     IRCFACCT
     I              acctno                      CFACCN
     I              actype                      CFATYP
     I              cfatyp                      CFATYPCD
     I
     IRCFACT4
     I              acctno                      CFACCN
     I              actype                      CFATYP
     I              cfatyp                      CFATYPCD
     I
     IRCFAGRP
     I              cfatyp                      CFATYPCD
     I
     š**************************************************************************
      * Like Defines
     š**************************************************************************
      *
    ‚ * For TLBKEY
     C     *LIKE         DEFINE    ICLEN         LEN
     C     *LIKE         DEFINE    ICEOM         QEOM
     C     *LIKE         DEFINE    ICHEAD        QHEAD
     C     *LIKE         DEFINE    ICIGNORE      QIGNORE
     C     *LIKE         DEFINE    CFCIFN        CIFNO
     C     *LIKE         DEFINE    CFCIFN        ZZCIFNO
     C     *LIKE         DEFINE    T4CFNA2       CFNA2
     C     *LIKE         DEFINE    T4CFNA3       CFNA3
     C     *LIKE         DEFINE    T4CFNA4       CFNA4
     C     *LIKE         DEFINE    T4CFNA5       CFNA5
     C     *LIKE         DEFINE    T4CFNA6       CFNA6
     C     *LIKE         DEFINE    T4CFNA7       CFNA7
     C     *LIKE         DEFINE    T4CFNA8       CFNA8
     C     *LIKE         DEFINE    CFSNME        wCFSNME

      * For CFNAME
     C     *LIKE         DEFINE    CFADTP        ADDTYP
     C     *LIKE         DEFINE    CFZSEQ        INDSEQ
     C     *LIKE         DEFINE    ACCTNO        INACCTNO
      *
     š**************************************************************************
      *‚Parameter Lists
     š**************************************************************************
      *
     ‚* Parameters for Retrieval of Job Info
      *
     C     JOBINF        PLIST
     C                   PARM                    JOB              10
     C                   PARM                    USER             10
     C                   PARM                    JOBNBR            6
     C                   PARM                    OUTQ             10
     C                   PARM                    OUTQLB           10
     C                   PARM                    CURUSR           10
      *
     C     NAMPAR        PLIST
     C                   PARM                    CIFNO
     C                   PARM                    ACCTNO
     C                   PARM                    ACTYPE
     C                   PARM                    NAMREQ            8
     C                   PARM                    CFNA1
     C                   PARM                    CFNA2
     C                   PARM                    CFNA3
     C                   PARM                    CFNA4
     C                   PARM                    CFNA5
     C                   PARM                    CFNA6
     C                   PARM                    CFNA7
     C                   PARM                    CFNA8
     C                   PARM                    NAMERR            1
      *
      * Get Account Information Entry List
      *
     C     ACTLST        PLIST
     C                   PARM                    TMQDSGTACN

M200 C     pTMCLOS       Plist
M200 C                   Parm                    ACCTNO
M200 C                   Parm                    ACTYPE
M300 C                   Parm                    IN_PRDRAT
M300 C                   Parm                    IN_PGMRATE
M300 C                   Parm                    DDOBAL
M200 C                   Parm                    cls_NETSETT
M200 C                   Parm                    ACR112
M200 C                   Parm                    cls_PENINT
M200 C                   Parm                    cls_SECACR
M200 C                   Parm                    cls_WHTDY
M300 C                   Parm                    cls_ZAKATI
M200 C                   Parm                    ODDLIM
M200 C                   Parm                    cls_PAYOFF
M200 C                   Parm                    cls_FeeCod1
M200 C                   Parm                    cls_FeeAmt1
M200 C                   Parm                    cls_FEEGLA1
M200 C                   Parm                    cls_FEEVAT1
M200 C                   Parm                    cls_FEESBT1
M200 C                   Parm                    cls_FeeCod2
M200 C                   Parm                    cls_FeeAmt2
M200 C                   Parm                    cls_FEEGLA2
M200 C                   Parm                    cls_FEEVAT2
M200 C                   Parm                    cls_FEESBT2
M200 C                   Parm                    cls_FeeCod3
M200 C                   Parm                    cls_FeeAmt3
M200 C                   Parm                    cls_FEEGLA3
M200 C                   Parm                    cls_FEEVAT3
M200 C                   Parm                    cls_FEESBT3
M200 C                   Parm                    cls_FeeCod4
M200 C                   Parm                    cls_FeeAmt4
M200 C                   Parm                    cls_FEEGLA4
M200 C                   Parm                    cls_FEEVAT4
M200 C                   Parm                    cls_FEESBT4
M200 C                   Parm                    cls_FeeCod5
M200 C                   Parm                    cls_FeeAmt5
M200 C                   Parm                    cls_FEEGLA5
M200 C                   Parm                    cls_FEEVAT5
M200 C                   Parm                    cls_FEESBT5
M200 C                   Parm                    cls_FeeCod6
M200 C                   Parm                    cls_FeeAmt6
M200 C                   Parm                    cls_FEEGLA6
M200 C                   Parm                    cls_FEEVAT6
M200 C                   Parm                    cls_FEESBT6
M200 C                   Parm                    cls_FeeCod7
M200 C                   Parm                    cls_FeeAmt7
M200 C                   Parm                    cls_FEEGLA7
M200 C                   Parm                    cls_FEEVAT7
M200 C                   Parm                    cls_FEESBT7
M200 C                   Parm                    cls_PGMOPT        8
M200 C                   Parm                    cls_ERR           1

M200 C     SErrParm      PLIST
M200 C                   Parm                    TLBTCD
M200 C                   Parm                    iMastCd           3 0
M200 C                   Parm      1             X                 2 0
M200 C                   Parm                    Acctno
M200 C                   Parm                    Actype
M200 C                   Parm                    TLBSVO            1
M200 C                   Parm                    TLBTLO            1
M200 C                   Parm                    TLBFRD            1
M200 C                   Parm                    TLBCOR            1
M200 C                   Parm                    TLXBED            1
M200 C                   Parm                    oHOVREQ           1
M200 C                   Parm                    osErrAr
M200 C                   Parm                    osErrty
M200 C                   Parm                    osErTxt
     C
M300 C     pl1005        PLIST
M300 C                   Parm                    Acctno
M300 C                   Parm                    Actype
M300 C                   Parm                    DS_DDMAST
M300 C                   Parm                    DS_CFAGRP
M300 C                   Parm                    Output1B       1000

M300 C     pCFNAM        PLIST
M300 C                   Parm                    CFCIFN
M300 C                   Parm                    INACCTNO
M300 C                   Parm                    WiACTYPE
M300 C                   Parm                    REQUET
M300 C                   Parm                    RNA1
M300 C                   Parm                    RNA2
M300 C                   Parm                    RNA3
M300 C                   Parm                    RNA4
M300 C                   Parm                    RNA5
M300 C                   Parm                    RNA6
M300 C                   Parm                    RNA7
M300 C                   Parm                    RNA8
M300 C                   Parm                    RNA9
M300 C                   Parm                    INDICATOR
M300 C                   Parm                    INDSEQ
M300 C                   Parm                    ADDTYP

      *
     š**************************************************************************
      *‚Key Lists
     š**************************************************************************
      *
     ‚*  Key List TLTEL File
     C     KEYTEL        KLIST
     C                   KFLD                    TLNUM
     C
      *
     ‚*  Key List TLTXAV File
     C     KEYTAV        KLIST
     C                   KFLD                    TLTTYP
     C                   KFLD                    TLTXCD
      *
     ‚*  Key List TLTX File
     C     KEYTX         KLIST
     C                   KFLD                    TLTXCD
      *
     ‚*  Key List TMFMSG File
     C     TMMSG         KLIST
     C                   KFLD                    PSMSG
     C                   KFLD                    PSPGM
      *
     ‚*  Key List TMHANPGM File
EB001C     HANKEY        KLIST
EB001C                   KFLD                    HANPGM            8
EB001C                   KFLD                    ALTROUTE

     ‚*  Key List CFAGRP File
     C     AgrpKey       KLIST
     C                   KFLD                    T5ACCTNO
     C                   KFLD                    T5ACTYPE

     ‚*  Key List CFAGRP File
     C     AccKey        KLIST
     C                   KFLD                    WiACCTNO
     C                   KFLD                    WiACTYPE

M200 ‚*  Key List Cd Group
M200 C     GrpKey        KLIST
M200 C                   KFLD                    WiACCTNO
M200 C                   KFLD                    GrpTYPE

     C     LNGRPKEY      KLIST
     C                   KFLD                    LNNUM
     C                   KFLD                    WiACTYPE
      *
M200 C     TLASTSKY      KLIST
M200 C                   KFLD                    TLSAPP
M200 C                   KFLD                    TSSYS
      *
M200 C     KEYCTL        KLIST
M200 C                   KFLD                    T1CUD
M200 C                   KFLD                    T1ALCUD
      *
M200 C     IDXKEY        KLIST
M200 C                   KFLD                    S_OACN
      *
M200 C     IDXKEY1       KLIST
M200 C                   KFLD                    S_NACN
      *
M200 C     TRXTKY        KLIST
M200 C                   KFLD                    WiACCTNO
M200 C                   KFLD                    WiACTYPE
M200 C                   KFLD                    P3TXTP
      *
M200 C     PAR5KEY       KLIST
M200 C                   KFLD                    TMFPAR
M200 C                   KFLD                    TMFITM
      *
     C     CFADKY        KLIST
     C                   KFLD                    CFCIFN
     C                   KFLD                    CFZSEQ
4062
4062 ‚*  Key List TMFPAR5
4062 C     K1_TMFPAR5    KLIST
4062 C                   KFLD                    TMFPAR
4062 C                   KFLD                    TMFITM
4062
4062 ‚*  Key List TMFPAR5
4062 C     K2_TMFPAR5    KLIST
4062 C                   KFLD                    TMFPAR
4062 C                   KFLD                    TMFITM
4062 C                   KFLD                    TMFVAL

EB001C     *ENTRY        PLIST
EB001C                   PARM                    ALTROUTE          1
     š**************************************************************************
      *‚Data Area
     š**************************************************************************
      *
     C     *DTAARA       DEFINE                  TLMAST
     C                   IN        TLMAST
      *
      * Get ICMAST Data Area
     C     *DTAARA       DEFINE                  ICMAST
     C                   IN        ICMAST
      *
4062 š**************************************************************************
4062  *‚Init
4062 š**************************************************************************
4062  *** Get Parameter Separator
4062 C                   Eval      TMFPAR  = 'TMPOIN5'
4062 C                   Eval      TMFITM  = 'NAME_SEP'
4062 C     K1_TMFPAR5    Chain     RTMFPAR5
4062‚C                   If        %Found(TMFPAR5)
4062 C                   Eval      sSeparator = TMFVAL
4062‚C                   Else
4062 C                   Eval      sSeparator = *Blanks
4062‚C                   EndIf
4062  *
     ‚**************************************************************************
     ‚*               M A I N    P R O C E S S I N G                           *
     ‚**************************************************************************
     ‚*  Value QHEAD in Message Log
     C                   MOVE      '*HAND'       QHEAD

     C                   CLEAR                   TLBUFF
      * Get DDPAR1
     C                   READ      DDPAR1                               1010
      *
      * Get job name
     C                   CALL      'SSRUSRC'     JOBINF
     C                   MOVE      JOB           ICDJOB
     C                   MOVEL     'TMPOIN5 '    ICDPGM
      *
      *  Check for message logging
      *
     C     ICLHAN        IFEQ      'Y'
     C                   OPEN      ICMSGL                               10
     C                   ENDIF
      *
      *  Load edits
     C                   EXSR      TMQLDEDT
      *
     C                   Z-ADD     512           LENO              5 0
      *
     C                   DOW       ICHEAD <> '*DOWN'
      *
     C                   CLEAR                   TLBUFF
     C                   CLEAR                   ICFDS
     ‚* Get queue name
     C                   EVAL      HANPGM = 'TMCOIN5 '
EB001C     HANKEY        CHAIN     TMHANPGM                           10
     C                   IF        *IN10 = *OFF
     C                   MOVEL     TMHQNM        QTO              10
     C                   ELSE
     C                   CLEAR                   QTO
     C                   ENDIF
     C                   Z-ADD     *ZEROS        QLEN1             5 0
     C                   Z-SUB     1             QWAIT             5 0
      *
     ‚* Receive from handler queue
     C                   SETON                                        75
     C                   Z-ADD     0             SNDRCVCNT
      *
     C                   DOW       *IN75 = *ON AND SNDRCVCNT < 15
      *
     C                   CALL      'QRCVDTAQ'                           75
     C                   PARM                    QTO
     C                   PARM                    TLMDTQ
     C                   PARM                    QLEN1
     C                   PARM                    ICFDS
     C                   PARM                    QWAIT
      *
     C                   IF        *IN75 = *ON
     C     TMMSG         CHAIN     TMFMSG                             76
     C                   IF        *IN76 = *OFF
     C                   ADD       1             SNDRCVCNT
     C                   ITER
     C                   ELSE
     C                   CALL      'QRCVDTAQ'
     C                   PARM                    QTO
     C                   PARM                    TLMDTQ
     C                   PARM                    QLEN1
     C                   PARM                    ICFDS
     C                   PARM                    QWAIT
     C                   LEAVE
      *
     C                   ENDIF
     C                   ENDIF
     C                   ENDDO
      *
     C     ICLHAN        IFEQ      'Y'
     C                   MOVE      QTO           ICDDTQ
     C                   MOVE      '*******'     ICDTMO
     C                   TIME                    ICDTIX            6 0
     C                   MOVE      ICDTIX        ICDTIM
     C                   MOVE      '*RCV'        ICDDIR
     C                   EXSR      TMQMICML
     C                   WRITE     RICMSGL
     C                   ENDIF
      *
     ‚* Check for CANCEL request
     C                   IF        ICHEAD <> '*DOWN'
      *
     C                   MOVEL     '0'           DATATP            1

BP01 C                   MOVEL     ICDATA        MSGBRK
BP01 C                   MOVEL     MSGBRK        TLBUFF
      *
     ‚* Entry time stamp
     C*                  TIME                    TLBTMI
     C                   TIME                    SYSTIME
     C
     C                   EVAL      WHR = %SUBDT(SYSTIME:*H)
     C                   EVAL      WMN = %SUBDT(SYSTIME:*MN)
     C                   EVAL      WSC = %SUBDT(SYSTIME:*S)
     C                   EVAL      MIL_SECS = %SUBDT(SYSTIME:*MS)
     C                   MOVEL     MIL_SECS      MMSEC
     C                   MOVE      WMM1          wMSC
     C                   EVAL      TLBTMI = TIMEST

SNYˆ C                   Time                    TLBSSTMDT

     ‚*   GET TELLER BRANCH
M200 C                   MOVEL     TLBCUD        DSCTLUNT
M200 C     KEYCTL        CHAIN     RTLCTLU                            11
M200 C                   IF        TLCBKNO = *ZEROS
M200 C                   Z-ADD     SSBNKN        TLCBKNO
M200 C                   ENDIF

SS01 ‚* Get Time for this transaction
ss01˜C                   Exsr      Find_Time
    ‚C                   Z-Add     wkTime        TLBTMI

     C                   MOVE      *ZEROS        ERN
     C                   MOVE      *BLANK        ERO
     C                   MOVE      *BLANK        APT
     C                   MOVE      *ZEROS        APL
     C                   MOVE      *BLANKS       TLTXOK
      *
     ‚* Move input fields to array
     C                   EXSR      TMQMFTO
      *
     š************************************************************************
     ‚* Process Non-Transaction Oriented Edits
     š*----------------------------------------------------------------------*
     ‚* Validate teller
      *
     C                   MOVE      TLBID         TLNUM
     C     KEYTEL        CHAIN     TLTEL                              10
     C     *IN10         IFEQ      '1'
      *
     C                   MOVEL     TLBTCD        TLTXCD
     C     KEYTX         CHAIN     TLTX                               10
     C     *IN10         IFEQ      '1'
     C                   MOVE      *BLANKS       TLXMNE
     C                   ENDIF
      *
     ‚*  Teller ID is invalid
     C                   Z-ADD     201           ERN(1)
     C                   EXSR      TMQ42GN1
M2002š*----------------------------------------------------------------------*
M2002C                   ELSE
M2002C                   IF        TLTRSV5 <> '*ACTIVE'
M2002C                   Z-ADD     413           ERN(1)
M2002C
M2002C                   EXSR      TMQ42GN1
     C                   ELSE
      *
     ‚*  Is this transaction valid?
      *
M200 C                   Clear                   ACT_STAT
     C                   MOVEL     TLBTCD        TLTXCD
      *
     C     KEYTX         CHAIN     TLTX                               10
     C     KEYTX         CHAIN     TLTXED                             11
     C     *IN10         IFEQ      '1'
     C                   MOVE      *BLANKS       TLBAFT
     C                   MOVE      *BLANKS       TLBPBT
     C                   MOVE      *BLANKS       TLXMNE
     ‚* Transaction is not supported
     C                   Z-ADD     202           ERN(1)
     C                   EXSR      TMQ42GN1
     C                   ELSE
      *
     C                   MOVE      TLXAFT        TLBAFT
     C                   MOVE      TLXPBT        TLBPBT
M200 C                   MOVEA     TLXC0R1       ACT_STAT
      *
     ‚* Can teller execute this transaction?
      *
     C     KEYTAV        CHAIN     TLTXAV                             10
     C     *IN10         IFEQ      '1'
     ‚* Not authorized to transaction
     C                   Z-ADD     203           ERN(1)
     C                   EXSR      TMQ42GN1
     C                   ELSE
      *
     ‚* Perform Inquiry
     C                   EXSR      $GETINP
     C                   IF        ERN(1) = *ZEROS
     C                   EXSR      $DETAIL
     C                   ENDIF
      *
     C                   ENDIF
      *
     C                   ENDIF

     ‚* Exit time stamp
     C                   TIME                    SYSTIME
     C                   EVAL      WHR = %SUBDT(SYSTIME:*H)
     C                   EVAL      WMN = %SUBDT(SYSTIME:*MN)
     C                   EVAL      WSC = %SUBDT(SYSTIME:*S)
     C                   EVAL      MIL_SECS = %SUBDT(SYSTIME:*MS)
     C                   MOVEL     MIL_SECS      MMSEC
     C                   MOVE      WMM1          wMSC
     C                   EVAL      TLBTMO = TIMEST
     š*----------------------------------------------------------------------*
     ‚* EXIT TIME STAMP
SS01˜C                   Exsr      Find_Time
    ‚C                   Z-Add     wkTime        TLBTMO

     ‚* Log this transaction whether rejected or not
     C                   IF        TLXLOG = 'Y' AND TLBTRN <> 'Y' AND
     C                             TLMRPS <> 'Y'

     c                   IF        ERN(1) <> *ZEROS
     C                   MOVE      *BLANKS       TLTXOK
     C                   ELSE
     C                   MOVE      'Y'           TLTXOK
     C                   ENDIF
      *
     ‚* Move error fields into log record field names
     C/COPY QTLSREFRLE,TMQMOVER
      *
     ‚* Clear branch and dorc fields in log record
     C                   MOVE      *BLANKS       DC
     C                   MOVE      *ZEROS        ABK
     C                   MOVE      *ZEROS        ABR
      *
     ‚* Move data to TLLOG fields
     C/COPY QTLSREFRLE,TMQMOVBR
      *
SNYˆ C                   Time                    TLBSSTMDO
     C                   WRITE     RTLLOG
     C                   Eval      TLERXREF = TLBTXREF
     C                   WRITE     RTLLOGa
      *
     C                   ENDIF
M2002C                   ENDIF
     C                   ENDIF
      *
     C                   ENDIF
     C                   ENDDO

     C                   IF        ICHEAD = '*DOWN'
     C                   EXSR      TMQ99GEN
     C                   ENDIF

     C                   MOVE      '1'           *INLR
     š**************************************************************************
      *‚$GETINP - Retrieve & Validate Input Data
     š**************************************************************************
     C     $GETINP       BEGSR
      *
     C                   MOVEL     TLBFIL        ACCNDS
     C                   IF        HEADR  = *BLANKS
     C*I300              Z-ADD     204           ERN(1)
I300 C                   Z-ADD     251           ERN(1)
     C                   EXSR      TMQ42GN1
     C                   LEAVESR
     C                   ENDIF
      *
     C                   ENDSR
     š**************************************************************************
      *‚$DETAIL - Get Details to Perform Inquiry
     š**************************************************************************
     C     $DETAIL       BEGSR
      *
     C                   SELECT
     C                   WHEN      HEADR  = 'TMQT4'
     C                   EXSR      GET_DTL_INT4
     C                   WHEN      HEADR  = 'TMQT5'
     C                   EXSR      GET_DTL_INT5
M200 C                   WHEN      HEADR  = 'TMQT6'
M200 C                   EXSR      GET_DTL_INT6
M200  *LN SEARCH BY VEHICLE NO
M200 C                   WHEN      HEADR  = 'TMQVECH'
M200 C                   EXSR      GET_VELNACC
     C                   ENDSL
      *
     ‚* Send End of message
     C
     C                   CLEAR                   OUTBUFF
     C                   IF        ERN(1) <> 0
     C                   ELSE
     C                   MOVEL     'Y'           QIGNORE
     C                   MOVEL     '*EOM'        QEOM
     C                   EXSR      srSend
     C                   ENDIF
      *
     C                   ENDSR
     š**************************************************************************
      *‚GET_DTL_INT4 - Get Detail Info
     š**************************************************************************
     C     GET_DTL_INT4  BEGSR
     C
     C                   Z-ADD     0             COUNTR
     C
     C                   DOW       (COUNTR <  CMAX)
     C                   ADD       1             COUNTR
     C                   Z-ADD     COUNTR        PP1               2 0
     C                   If        TLF(PP1) > 0
     C                   EXSR      srProcessT4
     C                   Endif
     C                   ENDDO
     C
     C                   ENDSR
     š**************************************************************************
      *‚srProcessT4 - Process CIF Details and Send
     š**************************************************************************
     C     srProcessT4   BEGSR
      *
     C                   Eval      wRSPCOD = T4RSPCOD
     C                   Eval      wRSPLEN = T4RSPLEN
     C                   CLEAR                   TMQT4
     C                   Eval      T4RSPCOD = wRSPCOD
     C                   Eval      T4RSPLEN = wRSPLEN
     C                   Z-ADD     0             ZZCIFNO
      *
     C                   Z-Add     TLF(PP1)      wiACCTNO
     C                   Movel (p) ACTY(PP1)     wiACTYPE


     C     wiACCTNO      CHAIN     CFACCTL1                           33
     C     *IN33         DOWEQ     *OFF
     C                   if        (CFRREL = 'P ' or CFRREL = ' P')
     C                             and *in33 = '0'
     C                   Z-ADD     CFCIFN        ZZCIFNO
     C                   LEAVE
     C                   ENDIF
     C     wiACCTNO      READE     RCFACCT                                33
     C                   ENDDO

      *
      * Get the Primary CIF
      *
     C                   IF        ZZCIFNO <> *ZEROS
     C                   EVAL      CIFNO  = CFCIFN
     C                   EVAL      ACCTNO = CFACCN
     C                   EVAL      ACTYPE = CFATYP
     C                   EVAL      NAMERR = *blanks
     C
     C                   MOVE      '*INQ    '    NAMREQ
     C                   CALL      'CFNAME'      NAMPAR
     C                   MOVE      CFNA1         T4CFNA1
     C                   MOVE      CFNA2         T4CFNA2
     C                   MOVE      CFNA3         T4CFNA3
     C                   MOVE      CFNA4         T4CFNA4
     C                   MOVE      CFNA5         T4CFNA5
     C                   MOVE      CFNA6         T4CFNA6
     C                   MOVE      CFNA7         T4CFNA7
     C                   MOVE      CFNA8         T4CFNA8
     C                   Z-ADD     ACCTNO        T4ACCTNO
     C                   MOVE      ACTYPE        T4ACTYPE
     C     CIFNO         CHAIN     CFMAST
     C                   IF        %FOUND(CFMAST)
     C                   MOVEL(P)  CFNA1         T4C1NM1
     C                   MOVEL(P)  CFNA1A        T4C1NM2
     C                   ELSE
     C                   MOVE      *BLANKS       T4C1NM1
     C                   MOVE      *BLANKS       T4C1NM2
     C                   ENDIF
     C                   ENDIF
     C
     ˜*Not Group Account Inquiry
K001‚C                   If        wiACTYPE <> 'G'
     C
‚     *To retrieve ledger and available balance
     C                   EXSR      srInitLst
     C                   CALLB     'TMSGTACN'    ACTLST
K001‚C                   ENDIF

     C                   IF        woERR <> 'Y'
BPX1 C**                 EVAL      T4AVLBAL = PAVLBAL
BPX1 C**                 EVAL      T4CBAL   = PCBAL
BPX1 C**                 MOVE      PSTAT         T4STAT
     C
     C                   MOVEL     'N'           QIGNORE
     C                   MOVEL(P)  TMQT4         OUTBUFF        1024
     C                   MOVEL     *BLANKS       QEOM
     C                   EXSR      srSend
     C
     C                   ELSE
     C                   Z-ADD     woERRN        ERN(1)
     C                   EXSR      TMQ42GN1
DB01 C                   ENDIF
     C
     C                   ENDSR
     š**************************************************************************
      *‚GET_DTL_INT5 - Get Detail Info
     š**************************************************************************
     C     GET_DTL_INT5  BEGSR
      *
     C                   Z-ADD     0             COUNTR
     C
     C                   DOW       (COUNTR <  CMAX)
     C                   ADD       1             COUNTR
     C                   Z-ADD     COUNTR        PP1               2 0
     C                   If        TLF(PP1) > 0
     C                   Exsr      srProcessT5
     C                   Endif
     C                   ENDDO
      *
     C                   ENDSR
     š**************************************************************************
      *‚srProcessT5 - Process Multi Account Summary Response
     š**************************************************************************
     C     srProcessT5   BEGSR

     ˆ* TODO - GET account name from CFAGRP - Sonny

     C                   Z-ADD     0             ZZCIFNO
      *
     C                   Eval      wRSPCOD = T5RSPCOD
     C                   Eval      wRSPLEN = T5RSPLEN
     C                   CLEAR                   TMQT5
     C                   Eval      T5RSPCOD = wRSPCOD
     C                   Eval      T5RSPLEN = wRSPLEN
      *
     C                   Z-Add     TLF(PP1)      wiACCTNO
     C                   Movel (P) ACTY(PP1)     wiACTYPE

     ˜* Special treatment for FD acct due to CFACCT store Group no as Acctno
     C                   IF        wiACTYPE = 'T'
     C     Acckey        CHAIN     CDMAST                             32
     C                   IF        *IN32 = '1'
     C     Acckey        CHAIN     CDTNEW                             32
     C                   ENDIF
     C                   Z-Add     CDNUM         wiACCTNO
     C                   ENDIF

     C     wiACCTNO      CHAIN     CFACCTL1                           33
     C     *IN33         DOWEQ     *OFF
     C                   if        (CFRREL = 'P ' or CFRREL = ' P')
     C                             and *in33 = '0'
     C                   Z-ADD     CFCIFN        ZZCIFNO
     C                   if        wiACTYPE = *BLANK
     C                   EVAL      wiACTYPE = CFATYP
     C                   endif
     C                   LEAVE
     C                   ENDIF
     C     wiACCTNO      READE     RCFACCT                                33
     C                   ENDDO

     ˜* Move Again to cater for FD acct no
     C                   Z-Add     TLF(PP1)      wiACCTNO
     C                   Movel (p) ACTY(PP1)     wiACTYPE
      *
      * Get the Primary CIF
      *
     C                   IF        ZZCIFNO <> *ZEROS
      *
     C                   EVAL      CIFNO  = CFCIFN
      *
     C                   Z-ADD     CFACCN        T5ACCTNO
     C                   MOVE      CFATYP        T5ACTYPE
     C     CIFNO         CHAIN     CFMAST
     C                   IF        %FOUND(CFMAST)
     C                   MOVEL(P)  CFCITZ        T5CFCITZ
    ˜C                   Move      CFINDI        T5CFINDI
     C                   ENDIF
     C                   ENDIF
     C
     C                   IF        T5CFINDI = *blanks
     C                   eval      T5CFINDI = 'N'
     C                   ENDIF
      *
‚     *To retrieve ledger and available balance
     C                   Exsr      srInitLst
     C                   CALLB     'TMSGTACN'    ACTLST
      *
SNY  C                   IF        wiACTYPE = 'D'
SNY  C     Acckey        Chain     DDmast
SNY  C                   If        Not %Found(Ddmast)
SNY  C     Acckey        Chain     DDtnew
SNY  C                   Endif
SNY  C
SNY  C                   If        CHKGTY = 'Y'
SNY  C                   Eval      woPBOK = 'C'
SNY  C                   Endif
SNY  C
SNY  C                   Endif
     C
     C                   IF        woErr <> 'Y'
    ˜C                   Exsr      get_AcctName
     C                   EVAL      T5DDCTYP = woACUR
     C                   EVAL      T5CFNA1  = woCFANA1
     C                   EVAL      T5CFANA2 = woCFANA2
     C                   EVAL      T5CFANA3 = woCFANA3
     C                   EVAL      T5CFANA4 = woCFANA4
     C                   EVAL      T5CFANA5 = woCFANA5
     C                   EVAL      T5ACBNK  = woACBK
     C                   EVAL      T5ACBRN  = woACBRN
     C                   EVAL      T5STAT   = woSTAT
     C                   EVAL      T5CCTL   = woCCTL
     C                   EVAL      T5SPTF   = woSPTF
     C                   EVAL      T5PBOK   = woPBOK
     C                   EVAL      T5STMT   = woSTMT
     C                   EVAL      T5STMPAS = woSTMPAS
     C                   EVAL      T5TPROD  = woPROD
     C                   EVAL      T5AVLBAL = woAVLBAL
     C                   EVAL      T5CBAL   = woCBAL
     C                   EVAL      T5TSTAFF = woSTAFF
     C                   EVAL      T5TFBENE = woBENE
     C                   EVAL      T5CFSNME = wCFSNME
      *
     C                   MOVEL     'N'           QIGNORE
     C                   MOVEL(P)  TMQT5         OUTBUFF
     C                   MOVEL     *BLANKS       QEOM
     C                   EXSR      srSend
     C                   ELSE
     C                   Z-ADD     woERRN        ERN(1)
     C                   EXSR      TMQ42GN1
     C                   ENDIF
     C
     C                   ENDSR
     š**************************************************************************
M200  *‚GET_DTL_INT6 - Get Detail Info
M200 š**************************************************************************
M200 C     GET_DTL_INT6  BEGSR
M200  *
M200 C                   Z-ADD     1             COUNTR
M200 C                   Z-ADD     1             COUNTR1
M200 C                   EVAL      CFLAG = 'N'

M201 C                   IF        TLAP(COUNTR1) = ' '
M201 C                   EXSR      Proc_Mult
M201 C                   ELSE
M201 C                   EXSR      Proc_Single
M201 C                   ENDIF
M200
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚Proc_Mult - Multiple T6 Processing
M200 š**************************************************************************
M200 C     Proc_Mult     BEGSR
     C
     ‚* CFLAG = 'N' to Check at least 1 acct is valid
M200 C                   DOW       (COUNTR1 <= CMAX1) AND (CFLAG = 'N')
M200 C                   Z-ADD     COUNTR        PP1               2 0
M200 C                   Z-ADD     COUNTR1       PP2               2 0
M200 C                   If        TLF(PP1) > 0
M200˜C                   Exsr      Pre_Chk_Sub
M200 C                   Endif
M200 C                   ADD       2             COUNTR
M200 C                   ADD       1             COUNTR1
M200 C                   ENDDO

M200ˆC                   If        CFLAG = 'Y'
M200 C                   Z-ADD     1             COUNTR
M200 C                   Z-ADD     1             COUNTR1
M200 C                   Exsr      srInit
M200 C                   DOW       (COUNTR1 <= CMAX1)
M200 C                   Z-ADD     COUNTR        PP1               2 0
M200 C                   Z-ADD     COUNTR1       PP2               2 0
M200 C                   If        TLF(PP1) > 0
M200˜C                   Exsr      srProcessT6
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVESR
M200 C                   ENDIF
    ˜C                   EXsr      srProcessTC
M200 C                   Endif
M200 C                   ADD       2             COUNTR
M200 C                   ADD       1             COUNTR1
M200 C                   ENDDO

M200 C                   EXSR      OTHRESP
M200ˆC                   ELSE
M200 C                   Z-ADD     1             ERN(1)
M200 C                   EXSR      TMQ42GN1
M200ˆC                   Endif

M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚Proc_Single - Single T6 Processing
M200 š**************************************************************************
M200 C     Proc_Single   BEGSR

M200 C                   Z-ADD     COUNTR        PP1
M200 C                   Z-ADD     COUNTR1       PP2
M200 C                   If        TLF(PP1) > 0
M200˜C                   Exsr      Pre_Chk_Sub
M200 C                   Endif


M200ˆC                   If        CFLAG = 'Y'
M200 C                   Z-ADD     1             COUNTR
M200 C                   Z-ADD     1             COUNTR1
M200 C                   Exsr      srInit
M200 C                   Z-ADD     COUNTR        PP1
M200 C                   Z-ADD     COUNTR1       PP2
M200 C                   If        TLF(PP1) > 0
M200 C                   Z-ADD     COUNTR1       PP2
M200˜C                   Exsr      srProcessT6
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVESR
M200 C                   ENDIF
M200˜C                   EXsr      srProcessTC
M200 C                   Endif
M200 C                   EXSR      OTHRESP
M200ˆC                   ELSE
      * Avoid Duplicate Error
TMPBYC                   IF        FILL04 <> *BLANKS AND
TMPBYC                             %SUBST(FILL04:1:10) = '*BYPASS'
TMPBYC                             AND ERN(1) = *ZERO
tmpbpC                   EXSR      srT6TMPRSP
TMPBYC                   ELSE
     C                   IF        ERN(1) = *ZERO
M200 C                   Z-ADD     1             ERN(1)
M200 C                   EXSR      TMQ42GN1
M200 C                   Endif
TMPBYC                   Endif
M200ˆC                   Endif

M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚Pre_Chk_Sub- Pre-Check for Account Validity
M200 š**************************************************************************
M200 C     Pre_Chk_Sub   BEGSR
M200 C                   Clear                   AcctSts           1 0
M200 C                   Z-Add     TLF(PP1)      wiACCTNO
M200 C                   Movel (P) ACTY(PP2)     wiACTYPE

M200 ‚* Demand Deposit
M200˜C                   SELECT
M200˜C                   WHEN      wiACTYPE = 'D' OR wiACTYPE = 'S'
M200˜C                              OR wiACTYPE = 'X'
M200 C     Acckey        Chain     DDmast                             39
M200 C                   If        Not %Found(Ddmast)
M200 C     Acckey        Chain     DDtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     DDmemo                             99
M200 C                   If        *IN39 = '0'
M200 C                   Eval      CFLAG = 'Y'
     C                   Z-Add     Status        AcctSts
M200 C                   Endif
     C
M200 C                   IF        TLRINQ = 'C'
     C                   Z-Add     2             AcctSts
M200 C                   ENDIF
     C
M200 ‚* Time Deposit
M200˜C                   WHEN      wiACTYPE = 'T'
M200 C     Acckey        Chain     CDmast                             39
M200 C                   If        Not %Found(Cdmast)
M200 C     Acckey        Chain     CDtnew                             39
M200 C                   IF        Not %Found(Cdtnew)
M200 C     Acckey        Chain     CDGMST                             39
M200 C                   Endif
M200 C                   Endif
M200 C     Acckey        Chain     CDmemo                             99
M200 C                   If        *IN39 = '0'
M200 C                   Eval      CFLAG = 'Y'
     C                   Z-Add     Status        AcctSts
M200 C                   Endif
M200 C                   IF        TLRINQ = 'C'
     C                   Z-Add     2             AcctSts
M200 C                   ENDIF
M200 ‚* Loans
M200˜C                   WHEN      wiACTYPE = 'L'
M200 C     Acckey        Chain     LNmast                             39
M200 C                   If        Not %Found(LNmast)
M200 C     Acckey        Chain     LNtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     LNmemo                             99
M200 C                   If        *IN39 = '0'
M200 C                   Eval      CFLAG = 'Y'
     C                   Z-Add     Status        AcctSts
M200 C                   Endif
M200 ‚* Safe Deposit Box
M200˜C                   WHEN      wiACTYPE = 'B'
M200 C     Acckey        Chain     SDmast                             39
M200 C                   If        Not %Found(SDmast)
M200 C     Acckey        Chain     SDtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     SDmemo                             99
M200 C                   If        *IN39 = '0'
M200 C                   Eval      CFLAG = 'Y'
M200 C                   Endif
     ‚* Unit Trust
M200˜C                   WHEN      wiACTYPE = 'U'
M200 C     Acckey        Chain     UTmast                             39
M200 C                   If        *IN39 = '0'
M200 C                   Eval      CFLAG = 'Y'
M200 C                   Endif

M200˜C                   ENDSL

     ‚* Account not found..Leave

M200 C                   If        *IN39 = '1'
M200 C                   leavesr
M200 C                   Endif
     š*=========================================================================
     ‚* Status Checks - For Single Only
     š*
     C                   IF        TLAP(COUNTR1) <> ' ' And TLBSRCSYS <> 'BDS'
     C                             And TLBSRCSYS <> 'ETP'
     C                             And (wiACTYPE = 'S' Or wiACTYPE = 'D' Or
     C                                  wiACTYPE = 'L')
M200 C                             And TLXC0R1 <> *Blank
     C                   Exsr      ValidateAcct
     C                   ENDIF
     š*=========================================================================
M200 C
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚ValidateAcct - Validate Account Status
M200 š**************************************************************************
M200 C     ValidateAcct  BEGSR
     C
     C                   MOVE      *All'0'       Cmp_sts           2
     C                   MOVE      AcctSts       Cmp_sts
     C                   Z-Add     1             cnx               1 0
     C     Cmp_sts       Lookup    ACT_STAT(cnx)                          87
     C                   If        *in87 = '1'
     C                   Z-ADD     7             ERN(1)
     C                   EXSR      TMQ42GN1
     C                   Eval      CFLAG = 'N'
     C                   LeaveSR
     C                   ENDIF
     ‚*
     ‚*Deposit - DDASTS Check
     C                   Clear                   osErrAr
     C                   Clear                   osErrty
     C                   Clear                   osErTxt
     C                   Clear                   oHOVREQ           1
     C                   Move      'DD'          wERRAPP           2
     C                   Z-ADD     882           iMastCd

SNY  C                   IF        wiACTYPE = 'D' OR
SNY  C                             wiACTYPE = 'S'
     C                   CALLB     'TMS882'      SErrParm
    ˜C                   If        osErrAr(1) <> 0
     C                   Z-Add     882           ERN(1)
     C                   Z-Add     osErrAr(1)    SBCD(1)
     C                   Eval      CFLAG = 'N'
     C                   EXSR      TMQ42GN1
     C                   LeaveSR
    ˜C                   Endif
    ˜C                   Endif
     C
     ‚*Deposit - LNASTS Check
     C                   Clear                   osErrAr
     C                   Clear                   osErrty
     C                   Clear                   osErTxt
     C                   Clear                   oHOVREQ           1
     C                   Move      'LN'          wERRAPP           2
     C                   Z-ADD     892           iMastCd

SNY  C                   IF        wiACTYPE = 'L'
     C                   CALLB     'TMS892'      SErrParm
    ˜C                   If        osErrAr(1) <> 0
     C                   Z-Add     892           ERN(1)
     C                   Z-Add     osErrAr(1)    SBCD(1)
     C                   Eval      CFLAG = 'N'
     C                   EXSR      TMQ42GN1
     C                   LeaveSR
    ˜C                   Endif
    ˜C                   Endif
     C
     ‚*Deposit - CFXSTS Check
     C                   Clear                   osErrAr
     C                   Clear                   osErrty
     C                   Clear                   osErTxt
     C                   Clear                   oHOVREQ           1
     C                   Move      'DD'          wERRAPP           2
     C                   Z-ADD     901           iMastCd

     C                   CALLB     'TMS901'      SErrParm
    ˜C                   If        osErrAr(1) <> 0
     C                   Z-Add     901           ERN(1)
     C                   Z-Add     osErrAr(1)    SBCD(1)
     C                   Eval      CFLAG = 'N'
     C                   EXSR      TMQ42GN1
     C                   LeaveSR
    ˜C                   Endif
     C
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚GET_VELNACC - Process Loan Account Info - search by vehicle no
M200 š**************************************************************************
M200 C     GET_VELNACC   BEGSR
M200
M200 C     *LIKE         DEFINE    ACCTNO        LN_ACCTNO
M200 C                   MOVEL     TLBFIL        VECHDS
M200 C                   Z-ADD     *ZEROS        LN_ACCTNO
M200 C                   MOVEL     VECHNO        LN_VECHNO
M200 C                   MONITOR
M200 C                   CALL      'LN1022'
M200 C                   PARM                    LN_ACCTNO
M200 C                   PARM                    LN_VECHNO        25
M200 C                   ON-ERROR
M200 C                   Z-ADD     *ZEROS        LN_ACCTNO
M200 C                   ENDMON
M200
M200 C                   IF        LN_ACCTNO <> *ZEROS
M200 C                   EXSR      srProcT6VEC
M200 C                   ELSE
M200 C                   Z-ADD     1             ERN(1)
M200 C                   EXSR      TMQ42GN1
M200 C                   Endif
M200
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessT6 - Process Multi Account Summary Response
M200 š**************************************************************************
M200 C     srProcessT6   BEGSR
M200
M200 C                   Z-ADD     0             ZZCIFNO
M200 C                   MOVE      'N'           ZZCDGRP           1
M200 C                   Eval      wRSPCOD = T6RSPCOD
M200 C                   Eval      wRSPLEN = T6RSPLEN
M200 C                   CLEAR                   TMQT6
M200 C                   Eval      T6RSPCOD = wRSPCOD
M200 C                   Eval      T6RSPLEN = wRSPLEN

M200 C                   Z-Add     TLF(PP1)      wiACCTNO
M200 C                   Movel (P) ACTY(PP2)     wiACTYPE

M200 ˜* Special treatment for FD acct due to CFACCT store Group no as Acctno
M200 C                   IF        wiACTYPE = 'T'
M200 C     Acckey        CHAIN     CDMAST                             32
M200 C                   IF        *IN32 = '1'
M200 C     Acckey        CHAIN     CDTNEW                             32
M200 C                   ENDIF
M200 C                   IF        *IN32 = '0'
M200 C                   Z-Add     CDNUM         wiACCTNO
M200 C                   ENDIF
M200 C                   ENDIF

M200 ˜* Special treatment for LN TRANCHE Acct
M200 C                   IF        wiACTYPE = 'L'
M200 C     Acckey        CHAIN     LNMAST                             32
M200 C                   IF        *IN32 = '1'
M200 C     Acckey        CHAIN     LNTNEW                             32
M200 C                   ENDIF
M200 C                   IF        *IN32 = '0' AND MCLNID = 'T'
M200 C                   Z-Add     LNNUM         wiACCTNO
M200 C                   ENDIF
M200 C                   ENDIF

M200 C                   Z-Add     TLF(PP1)      ACTN(PP2)
M200 C                   Movel (P) ACTY(PP2)     ATYE(PP2)

M200 ‚*To retrieve ledger and available balance
M200 C     wiACCTNO      CHAIN     CFACCTL1                           33
M200 C     *IN33         DOWEQ     *OFF
M200 C                   if        (CFRREL = 'P ' or CFRREL = ' P')
M200 C                             and *in33 = '0'
M200 C                   Z-ADD     CFCIFN        ZZCIFNO
M200 C                   LEAVE
M200 C                   ENDIF
M200 C     wiACCTNO      READE     RCFACCT                                33
M200 C                   ENDDO

M200 C                   EVAL      CIFNO  = CFCIFN
M200 C                   Z-ADD     CFACCN        T6TACTNO
M200 C                   MOVE      CFATYP        T6TACTYP
M200  *
M200ˆC                   IF        ZZCIFNO <> *ZEROS
M200 C     ZZCIFNO       CHAIN     CFMAST
M200 C                   IF        %FOUND(CFMAST)
M200 C                   MOVEL(P)  CFSSNO        T6TIDNO
M200 C                   MOVEL(P)  CFSSCD        T6TIDTYP
M200 C                   MOVEL(P)  CFSEGC        T6TCSEG
M200 C                   MOVEL(P)  CFRESD        T6TBRESD
M200 C                   MOVEL(P)  CFINDI        T6TINDI
M200 C                   MOVEL(P)  CFCIDT        T6TIDCOUN
S2025C                   MOVEL(P)  CFVIPI        T6TXXXFIL
M200 C                   IF        wiACTYPE = 'T'
M200 C                   MOVEL(P)  CFSBUC        T6TSBU
M200 C                   ENDIF
M200 C                   ENDIF

M200 C                   Eval      T6TEXTRN = 'N'
M200 C                   EVAL      T6TCIF   = ZZCIFNO

M200 ‚* Get Name from CFAGRP
M200 C     AccKey        Chain     CFagrp
M200˜C                   IF        %Found(Cfagrp)
M200 C                   IF        wiACTYPE <> 'T'
M200 C                   EVAL      T6TSBU   = CFSBUC
M200 C                   ENDIF
M200 C                   EVAL      T6TSGCOD = CFSGNC

M200 C                   EXSR      get_T6AcName

I300 C                   IF        TLMNEX <> 'Y'
M200 C                   EVAL      T6TACNM1 = CFANA1 + CFANA2
M200 C                   EVAL      T6TACNM2 = CFANA3 + CFANA4 + CFANA5
M200 C                   EVAL      T6TCFNM1 = CFSNME
M200 C                   IF        wiACTYPE = 'L'
M200 C                   EXSR      get_LNAcName
M200 C                   ENDIF
I300 C                   ENDIF

M200 C                   EVAL      T6TSTAFF = CFUSTF
M200 C                   EVAL      T6TBKORST = 'S'
M200 C                   IF        CFBOOK = 'Y' and
M200 C                             (wiACTYPE = 'D' OR wiACTYPE = 'S'
M200 C                              OR wiACTYPE = 'X')
M200 C                   EVAL      T6TBKORST = 'B'
M200 C                   ENDIF
     C
M202‚C*M201              IF        CFMACD= 'A'
M202‚C                   IF        CFMACD <> ' '
M201‚C                   Eval      t6TIPAYROL = 'Y'
M201‚C                   ELSE
M201‚C                   Eval      t6TIPAYROL = 'N'
M201‚C                   ENDIF
     C
M200˜C                   Else
M200 C                   Z-ADD     wiACCTNO      T6TACTNO
M200 C                   MOVE      wiACTYPE      T6TACTYP
M200 C                   EVAL      T6TACNM1 = 'INVALID ACCOUNT NO'
     C                   Goto      Not_Found
M200˜C                   ENDIF
M200  *
M200 C                   Exsr      Get_ACCTINFO
M200 C
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVESR
M200 C                   ENDIF

M200 C                   Exsr      Get_ACCTIBG
M200 C                   Exsr      Get_TLASTS
M200 C                   Exsr      Get_CHGCDS
M200ˆC                   ELSE
M200 C                   Z-ADD     wiACCTNO      T6TACTNO
M200 C                   MOVE      wiACTYPE      T6TACTYP
M200 C                   EVAL      T6TACNM1 = 'INVALID ACCOUNT NO'
M200ˆC                   ENDIF

     C     Not_Found     Tag
M200 C                   MOVEL     'N'           QIGNORE
M200 C                   MOVEL(P)  TMQT6         OUTBUFF
M200 C                   MOVEL     *BLANKS       QEOM
M200 C                   EXSR      srSend
M200  *
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcT6VEC - Process loan account info
M200 š**************************************************************************
M200 C     srProcT6VEC   BEGSR
M200
M200 C                   Z-ADD     0             ZZCIFNO
M200 C                   MOVE      'N'           ZZCDGRP           1
M200 C                   Eval      wRSPCOD = T6RSPCOD
M200 C                   Eval      wRSPLEN = T6RSPLEN
M200 C                   CLEAR                   TMQT6
M200 C                   Eval      T6RSPCOD = wRSPCOD
M200 C                   Eval      T6RSPLEN = wRSPLEN
M200 C                   Z-Add     LN_ACCTNO     wiACCTNO
M200 C                   EVAL      wiACTYPE = 'L'

M200 C     Acckey        Chain     LNmast                             39
M200 C                   If        Not %Found(LNmast)
M200 C     Acckey        Chain     LNtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     LNmemo                             38
M200 C                   If        *IN39 = '0'
M200 C                   EVAL      T6TSTAT  = STATUS
M200 C                   EVAL      T6TTRNCH = ACTDDD
M200 C                   EVAL      T6TLNSOLD= *BLANKS
M200 C                   EVAL      T6TBRN   = BRN
M200 C                   EVAL      T6TBNK   = BKN
M200 C                   EVAL      T6TAPRD  = TYPE
M200 C                   EVAL      T6TNPL   = NPLFLG
M200 C                   EVAL      T6TBKTYP = LNSPTF
M200 C                   EVAL      T6TACCUR = CURTYP
M200 C                   EVAL      T6TCIF   = CIFNO
M200 C                   EVAL      T6TACTNO = ACCTNO
M200 C                   EVAL      T6TACTYP = ACTYPE
M200 C
M200 C     NSPDT8        IFEQ      NEXTD7
M200 C     NSIPD8        OREQ      NEXTD7
M200 C     NSPDT8        OREQ      MATDT8
M200 C     NEXTD7        ANDGT     MATDT8
M200 C                   Z-ADD     BILINT        wIntOs
M200 C                   ELSE
M200 C                   Z-ADD     BILINO        wIntOs
M200 C                   ENDIF
M200 C                   Eval      T6TAVBAL = (CBAL+ASSLC+PAIDLC+MISCD+OTHCHG
M200 C                                        +wIntOs-ADVPMT+MEMAMT)
M200 C                   Eval      T6TCBAL  = CBAL - OBAL
M200 C                   Eval      T6TWOFF  = 'N'
M200 C                   If        PWOFID = '8' OR PWOFID = 'O'
M200 C                   EVAL      T6TWOFF  = 'Y'
M200 C                   Endif
M200 C                   EVAL      TLSAPP      = 'LN'
M200  *
M200 C     CIFNO         CHAIN     CFMAST
M200 C                   IF        %FOUND(CFMAST)
M200 C                   MOVEL(P)  CFSSNO        T6TIDNO
M200 C                   MOVEL(P)  CFSSCD        T6TIDTYP
M200 C                   MOVEL(P)  CFSEGC        T6TCSEG
M200 C                   MOVEL(P)  CFRESD        T6TBRESD
M200 C                   ENDIF
M200 C                   Eval      T6TEXTRN = 'N'
M200  *
M200 C     AccKey        Chain     CFagrp
M200 C                   IF        %Found(Cfagrp)
M200 C                   EVAL      T6TSBU   = CFSBUC
M200 C                   EVAL      T6TSGCOD = CFSGNC
M200 C                   EVAL      T6TACNM1 = CFANA1 + CFANA2
M200 C                   EVAL      T6TACNM2 = CFANA3 + CFANA4 + CFANA5
M200 C                   EVAL      T6TCFNM1 = CFSNME
M300 C                   EXSR      get_T6AcName
M200 C*M300              EXSR      get_LNAcName
M200 C                   EVAL      T6TSTAFF = CFUSTF
M200 C                   EVAL      T6TBKORST = 'S'
M200 C                   ENDIF
M200  *
M200 C     AccKey        CHAIN     LNASTS                             34
M200 C                   CLEAR                   HDS
M200 C                   EVAL      TLSAPP      = 'LN'
M200 C     TLSAPP        CHAIN     RTLASDS                            30
M200
M200 C                   IF        *IN34 = '0'
M200 C                   Z-ADD     0             STCNT             3 0
M200 C                   Z-ADD     0             ST                2 0
M200  *
M200 C     ST            DOUEQ     98
M200 C     STCNT         OREQ      7
M200 C                   ADD       1             ST
M200 C                   IF        AS(ST) = 'Y'
M200 C                   SELECT
M200 C                   WHEN      T6THDCD1 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD1
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS1
M200 C                   WHEN      T6THDCD2 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD2
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS2
M200 C                   WHEN      T6THDCD3 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD3
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS3
M200 C                   WHEN      T6THDCD4 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD4
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS4
M200 C                   WHEN      T6THDCD5 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD5
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS5
M200 C                   WHEN      T6THDCD6 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD6
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS6
M200 C                   WHEN      T6THDCD7 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD7
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS7
M200 C                   ENDSL
M200 C                   ENDIF
M200 C                   ENDDO
M200 C                   ENDIF
M200  *
M200 C                   MOVEL     'N'           QIGNORE
M200 C                   MOVEL(P)  TMQT6         OUTBUFF
M200 C                   MOVEL     *BLANKS       QEOM
M200 C                   EXSR      srSend
M200 C                   ELSE
M200 C                   Z-ADD     1             ERN(1)
M200 C                   EXSR      TMQ42GN1
M200 C                   ENDIF
M200  *
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessTC - Process GDA Collection Response
M200 š**************************************************************************
M200 C     srProcessTC   BEGSR
M200
M200 C                   IF        TLXSWPPR > *Zero
M200 C                   MOVE      TLXSWPPR      wrn               2 0
M200 C                   Z-ADD     TLF(wrn)      CIWRNO
M200 C                   Else
M200 C                   Z-ADD     *ZERO         CIWRNO
M200 C                   ENDIF
M200
M200 C                   IF        COMACT <> 'Y' or CIWRNO = *ZERO
M200 C                   LEAVESR
M200 C                   ENDIF
M200
M200 C     GCTMKY1       KLIST
M200 C                   KFLD                    Acctno
M200 C                   KFLD                    Actype
M200 C                   KFLD                    CIWRNO
M200
M200 C     GCTMKY1       CHAIN     DDGCTML1
M200 C                   IF        NOT %FOUND(DDGCTML1)
M200 C                   LEAVESR
M200 C                   ENDIF

M200 C                   EXSR      TMQTCGEN
M200  *
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessT8 - Process to get min charge and max charge
M200 š**************************************************************************
M200 C     srProcessT8   BEGSR
M200 C                   IF        TLXUFD <> *BLANKS
M200 C                   Z-ADD     1             XX                2 0
M200 C
M200 C                   If        TLAP(XX) = ' '
M200 C                   DOW       XX <= CMAX1
M200 C                   EXSR      Get_CHGAMT
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVESR
M200 C                   ENDIF
M200 C                   ADD       1             XX
M200 C                   ENDDO
M200 C                   ELSE
M200 C                   EXSR      Get_CHGAMT
M200 C                   ENDIF
M200 C                   ENDIF
M200 C
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessV4 - Process to response previous TD placemant int/mat disp
M200 š**************************************************************************
M200 C     srProcessV4   BEGSR
M200 C                   IF        ZZCDGRP  = 'Y'
M200 C                   EXSR      TMQV4GEN
M200 C                   ENDIF
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessTA - Process to response for additional SD Account detail
M200 š**************************************************************************
M200 C     srProcessTA   BEGSR
M200 C                   IF        wiACTYPE  ='B'
M200 C                   EXSR      TMQTAGEN
M200 C                   ENDIF
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessTB - Process to response for additional UT Account detail
M200 š**************************************************************************
M200 C     srProcessTB   BEGSR
     C                   IF        wiACTYPE  ='U'
M200 C                   EXSR      TMQTBGEN
     C                   ENDIF
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessT7 - Process to response for additional LN Account detail
M200 š**************************************************************************
M200 C     srProcessT7   BEGSR
M200 C                   IF        wiACTYPE  ='L'
M2001C
M200 C                   Z-ADD     WiACCTNO      LN_ACCTNO
M200 C                   MOVEL     *BLANKS       LN_VECHNO
M200 C                   MONITOR
M200 C                   CALL      'LN1022'
M200 C                   PARM                    LN_ACCTNO
M200 C                   PARM                    LN_VECHNO
M200 C                   ON-ERROR
M200 C                   MOVEL     *BLANKS       LN_VECHNO
M200 C                   ENDMON
M200
M200 C                   EXSR      TMQT7GEN
M200 C                   ENDIF
M200 C                   ENDSR
     š**************************************************************************
M200  *‚ SEND UP TO 12 RESPONSES
M200 š**************************************************************************
M200 C     OTHRESP       BEGSR
M200 C                   Z-ADD     1             X1                2 0
M200 C                   DO        CMAX1         X1
M200 C                   SELECT
M200 C                   WHEN      RS(X1) = 'T8'
M200 C                   IF        Z1GBFL3 <> 'Y'
M200 C                   Exsr      srProcessT8
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVE
M200 C                   ENDIF
M200 C                   EXSR      TMQT8GEN
M200 C                   ENDIF
M200 C                   WHEN      RS(X1) = 'V4'
M200 C                   EXSR      srProcessV4
M200 C                   WHEN      RS(X1) = 'TA'
M200 C                   EXSR      srProcessTA
M200 C                   WHEN      RS(X1) = 'T7'
M200 C                   Exsr      srProcessT7
M200 C                   WHEN      RS(X1) = 'TB'
M200 C                   Exsr      srProcessTB
M200 C                   WHEN      RS(X1) = 'D2'
M200 C                   Exsr      srProcessD2
M200 C                   WHEN      RS(X1) = 'T0'
M200 C                   IF        Z1GBFL3 = 'Y'
M200 C                   Exsr      srProcessT0
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVE
M200 C                   ENDIF
M200 C                   EXSR      TMQT0GEN
M200 C                   ENDIF

      * CIMB Niaga T6 Ext - Single Inquiry
M300 C                   WHEN      RS(X1) = '1B' AND TLAP(COUNTR1) <> ' '
M300 C                             AND (Actype = 'D' or Actype = 'S')
M300 C                   CALLB     'TMS1005'     pl1005
M300 C                   EXSR      TMQ1BGEN
M200 C                   ENDSL
M200 C                   ENDDo
M200 C                   ENDSR
      *
     š**************************************************************************
M300  *‚T6 get_T6AcName
     š**************************************************************************
M300 C     get_T6AcName  BegSR
M300 C
I300 C                   IF        TLMNEX = 'Y'

M300 C                   Z-add     WiACCTNO      INACCTNO
M300 C                   Eval      REQUET = '*CNN'

M300ˆC                   IF        wiACTYPE = 'L'
M300 C     Acckey        Chain     LNMAST
M300 C                   IF        NOT %FOUND(LNMAST)
M300 C     Acckey        Chain     LNTNEW
M300 C                   ENDIF
M300 C                   IF        MCLNID = 'T'
M300 C                   Z-add     LNNUM         INACCTNO
M300 C     LNGRPKEY      Chain     CFagrp
M300 C                   ENDIF
M300ˆC                   ENDIF
M300 C
M300 C                   Clear                   DSNam
M300 C                   CALLB     'CFNAME'      pCFNAM

M300 C                   EVAL      DSNam    =  RNA1
M300 C                   EVAL      T6TACNM1 =  DSNam1
M300 C                   EVAL      DSNam    =  RNA2
M300 C                   EVAL      T6TACNM2 =  DSNam2

M300 C                   EVAL      T6TCFNM1 = CFSNME
4062  *
4062  * This logic only applie for Deposit Product
4062ˆC                   IF        HEADR  = 'TMQT6'
4062ˆC                   IF        wiACTYPE = 'S'
4062ˆC                              or wiACTYPE = 'D'
4062  * Check if Account is Biller
4062  *** Check Parameter is Enable or Not
4062 C                   Eval      TMFPAR  = 'TMPOIN5'
4062 C                   Eval      TMFITM  = 'NAME_BILL'
4062 C     K1_TMFPAR5    Chain     RTMFPAR5
4062‚C                   If        %Found(TMFPAR5) and TMFVAL = 'Y'
4062 C     INACCTNO      Chain     RISPPM
4062 C                   If        %Found(INIISPPM)
4062 C                   If        sSeparator <> *Blanks
4062 C                   If        T6TACNM2 <> *Blanks
4062 C                   Eval      T6TACNM1 = %trim(T6TACNM1) + ' ' +
4062 C                               %Trim(sSeparator) + ' ' +
4062 C                               %Trim(T6TACNM2)
4062 C                   EndIf
4062 C                   Else
4062 C                   Eval      T6TACNM1 = %trim(T6TACNM1) + ' ' +
4062 C                               %Trim(T6TACNM2)
4062 C                   EndIf
4062 C                   EndIf
4062‚C                   EndIf
4062
4062  * Check if Account is ATM Vendor
4062 C     Acckey        Chain     rDDmast
4062 C                   If        Not %Found(DDmast)
4062 C     Acckey        Chain     rDDtnew
4062 C                   Endif
4062
4062 C                   Eval      TMFPAR  = 'TMPOIN5'
4062 C                   Eval      TMFITM  = 'NAME_ATM'
4062 C                   Eval      TMFVAL  = SCCODE
4062 C     K2_TMFPAR5    Chain     RTMFPAR5
4062‚C                   If        %Found(TMFPAR5)
4062 C                   If        sSeparator <> *Blanks
4062 C                   If        T6TACNM2 <> *Blanks
4062 C                   Eval      T6TACNM1 = %trim(T6TACNM1) + ' ' +
4062 C                               %Trim(sSeparator) + ' ' +
4062 C                               %Trim(T6TACNM2)
4062 C                   EndIf
4062 C                   else
4062 C                   Eval      T6TACNM1 = %trim(T6TACNM1) + ' ' +
4062 C                               %Trim(T6TACNM2)
4062 C                   EndIf
4062‚C                   EndIf
4062  *
4062ˆC                   ENDIF
4062ˆC                   ENDIF

I300 C                   ENDIF
M300 C
M300 C                   EndSr
     š**************************************************************************
      *‚T6 get_LNAcName
     š**************************************************************************
      *
     C     get_LNAcName  BEGSR
      *
     C                   IF        wiACTYPE = 'L'
     C     Acckey        Chain     LNMAST
     C                   IF        NOT %FOUND(LNMAST)
     C     Acckey        Chain     LNTNEW
     C                   ENDIF
     C
     C                   IF        MCLNID = 'T'
     C     LNGRPKEY      Chain     CFagrp
    ‚C                   IF        %Found(Cfagrp)
M200 C                   EVAL      T6TACNM1 = CFANA1 + CFANA2
M200 C                   EVAL      T6TACNM2 = CFANA3 + CFANA4 + CFANA5
M200 C                   EVAL      T6TCFNM1 = CFSNME
    ‚C                   Endif
    ‚C                   Endif
     C
     C                   ENDIF
     C
     C                   EndSr
      *
     š**************************************************************************
      *‚get_AcctName
     š**************************************************************************
      *
     C     get_AcctName  BEGSR
      *
     C     AccKey        Chain     CFagrp
    ‚C                   IF        %Found(Cfagrp)
     C                   EVAL      woCFANA1  =  CFANA1
     C                   EVAL      woCFANA2  =  CFANA2
     C                   EVAL      woCFANA3  =  CFANA3
     C                   EVAL      woCFANA4  =  CFANA4
     C                   EVAL      woCFANA5  =  CFANA5
     C                   EVAL      wCFSNME   =  CFSNME
    ‚C                   Endif

     C                   IF        wiACTYPE = 'L'
     C     Acckey        Chain     LNMAST
     C                   IF        NOT %FOUND(LNMAST)
     C     Acckey        Chain     LNTNEW
     C                   ENDIF
     C
     C                   IF        MCLNID = 'T'
     C     LNGRPKEY      Chain     CFagrp
    ‚C                   IF        %Found(Cfagrp)
     C                   EVAL      woCFANA1  =  CFANA1
     C                   EVAL      woCFANA2  =  CFANA2
     C                   EVAL      woCFANA3  =  CFANA3
     C                   EVAL      woCFANA4  =  CFANA4
     C                   EVAL      woCFANA5  =  CFANA5
     C                   EVAL      wCFSNME   =  CFSNME
    ‚C                   Endif
    ‚C                   Endif
     C
     C                   ENDIF
     C
     C                   EndSr
      *
     š**************************************************************************
M200  *‚Get TLASTS Info
M200 š**************************************************************************
M200 C     Get_TLASTS    BEGSR
M200 C
M200 C                   IF        ZZCDGRP  = 'N'

M200 C                   If        WiACTYPE = 'D' or WiACTYPE = 'S' or
M200 C                             WiACTYPE = 'X' or WiACTYPE = 'T'
M200 C                             OR WiACTYPE = 'B'
M200 C     AccKey        CHAIN     DDASTS                             34
M200 C                   ElseIf    WiACTYPE = 'L'
M200 C     AccKey        CHAIN     LNASTS                             34
M200 C                   ELse
M200 C                   Leavesr
M200 C                   EndIf

M200 C                   ELSE
M200 C     GrpKey        CHAIN     DDASTS                             34
M200 C                   ENDIF
M200
M200 C                   EVAL      TSSYS ='*EXTERNAL'
M200 C     TLASTSKY      CHAIN     RTLASTSPAR                         31
M200 C*M300              IF        *IN31 = '0'
M300 C                   IF        *IN31 = '0' and  TSCDE <> *BLANK
M200 C                   MOVE      TSCDE         STT               2 0
M200 C                   ENDIF
M200  *
M200 C                   CLEAR                   HDS
M300 C                   Z-ADD     0             STCNT             3 0
M300 C                   Z-ADD     0             ST                2 0

M200 C     TLSAPP        CHAIN     RTLASDS                            30
M200
M200 C                   IF        *IN34 = '0' AND STT <> 0
M200 C*M300              Z-ADD     0             STCNT             3 0
M200 C*M300              Z-ADD     0             ST                2 0
M200 C                   IF        AS(STT) = 'Y'
M200 C                   MOVEL(P)  'Y'           T6TEXTRN
M200 C                   ENDIF
M200 C                   ENDIF
M200  *
M200 C                   IF        *IN34 = '0'
M200 C     ST            DOUEQ     98
M200 C     STCNT         OREQ      7
M200 C                   ADD       1             ST
M200 C                   IF        AS(ST) = 'Y'
M200 C                   SELECT
M200 C                   WHEN      T6THDCD1 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD1
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS1
M200 C                   WHEN      T6THDCD2 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD2
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS2
M200 C                   WHEN      T6THDCD3 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD3
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS3
M200 C                   WHEN      T6THDCD4 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD4
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS4
M200 C                   WHEN      T6THDCD5 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD5
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS5
M200 C                   WHEN      T6THDCD6 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD6
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS6
M200 C                   WHEN      T6THDCD7 = *BLANKS
M200 C                   MOVEL(P)  ST            T6THDCD7
M200 C                   ADD       1             STCNT
M200 C                   MOVEL(P)  HDS(ST)       T6THDDS7
M200 C                   ENDSL
M200 C                   ENDIF
M200 C                   ENDDO
M200 C                   ENDIF
M200  *
M200 C                   EndSr
     š**************************************************************************
M200  *‚Get Charge Type Info
M200 š**************************************************************************
M200 C     Get_CHGCDS    BEGSR
M200 C
M200 C                   IF        TLXUFD <> *BLANKS
M200 C                   MOVEL(P)  TLXUFD        TLTXCD
M200 C     KEYTX         CHAIN     TLTXEXT                            13
M200 C     KEYTX         CHAIN     TLTX                               13
     ‚* Common Charges
M200 C                   Z-ADD     0             STCNT
M200 C                   Z-ADD     0             ST
M200 C     ST            DOUEQ     29
M200 C     STCNT         OREQ      5
M200 C                   ADD       1             ST
M200 C                   IF        TXCHCD(ST) <> *BLANKS
M200 C                   SELECT
M200 C                   WHEN      T6TCHGCD1 = *BLANKS
M200 C                   MOVEL(P)  TXCHCD(ST)    T6TCHGCD1
M200 C                   ADD       ST            IDX1(PP2)
M200 C                   MOVEL(P)  TXCHCD(ST)    COD1(PP2)
M200 C                   ADD       1             STCNT
M200 C                   MOVEL     'TLTX'        FLD1(PP2)
M200 C                   MOVEL     TAMU(ST)      ZZ                2
M200 C                   EVAL      VLE1(PP2) = 'TLBF' + ZZ
M200 C                   WHEN      T6TCHGCD2 = *BLANKS
M200 C                   MOVEL(P)  TXCHCD(ST)    T6TCHGCD2
M200 C                   ADD       ST            IDX2(PP2)
M200 C                   MOVEL(P)  TXCHCD(ST)    COD2(PP2)
M200 C                   ADD       1             STCNT
M200 C                   MOVEL     'TLTX'        FLD2(PP2)
M200 C                   MOVEL     TAMU(ST)      ZZ
M200 C                   EVAL      VLE2(PP2) = 'TLBF' + ZZ
M200 C                   WHEN      T6TCHGCD3 = *BLANKS
M200 C                   MOVEL(P)  TXCHCD(ST)    T6TCHGCD3
M200 C                   ADD       ST            IDX3(PP2)
M200 C                   MOVEL(P)  TXCHCD(ST)    COD3(PP2)
M200 C                   ADD       1             STCNT
M200 C                   MOVEL     'TLTX'        FLD3(PP2)
M200 C                   MOVEL     TAMU(ST)      ZZ
M200 C                   EVAL      VLE3(PP2) = 'TLBF' + ZZ
M200 C                   WHEN      T6TCHGCD4 = *BLANKS
M200 C                   MOVEL(P)  TXCHCD(ST)    T6TCHGCD4
M200 C                   ADD       ST            IDX4(PP2)
M200 C                   MOVEL(P)  TXCHCD(ST)    COD4(PP2)
M200 C                   ADD       1             STCNT
M200 C                   MOVEL     'TLTX'        FLD4(PP2)
M200 C                   MOVEL     TAMU(ST)      ZZ
M200 C                   EVAL      VLE4(PP2) = 'TLBF' + ZZ
M200 C                   WHEN      T6TCHGCD5 = *BLANKS
M200 C                   MOVEL(P)  TXCHCD(ST)    T6TCHGCD5
M200 C                   ADD       ST            IDX5(PP2)
M200 C                   MOVEL(P)  TXCHCD(ST)    COD5(PP2)
M200 C                   ADD       1             STCNT
M200 C                   MOVEL     'TLTX'        FLD5(PP2)
M200 C                   MOVEL     TAMU(ST)      ZZ
M200 C                   EVAL      VLE5(PP2) = 'TLBF' + ZZ
M200 C                   ENDSL
M200 C                   ENDIF
M200 C                   EndDo
     ‚* Closing Transaction get Charges from TMSCONETA
M200 C                   IF        Z1GBFL3 = 'Y'
M200˜C                   EXSR      Get_ClsChrg
M200 C                   ENDIF
     C                   MOVEL     TLBTCD        TLTXCD
M200 C     KEYTX         CHAIN     TLTX                               13
M200 C                   ENDIF
M200 C                   EndSr
     š**************************************************************************
M200  *‚Get Closing Charge From TMSCONETA
M200 š**************************************************************************
M200 C     Get_ClsChrg   BEGSR
     C
M300 C                   Z-ADD     *ZERO         IN_PRDRAT
M300 C                   Z-ADD     *ZERO         IN_PGMRATE
     C
      * Product Penalty Recalculation
M300 C                   IF        Z1GBLC9 > *ZEROS AND TLF(Z1GBLC9) <>0
M300 C                   Z-ADD     TLF(Z1GBLC9)  IN_PRDRAT
M300 C                   ENDIF
      * Product Program Recalculation
M300 C                   IF        Z1GBLC0 > *ZEROS AND TLF(Z1GBLC0) <>0
M300 C                   Z-ADD     TLF(Z1GBLC0)  IN_PGMRATE
M300 C                   ENDIF
     C
M200 C                   CALLB     'TMSCONETA'   pTMCLOS

M200 C                   Z-ADD     0             Cls1              1 0
     ‚* Charges 1(Early Closing)
M200 C                   IF        cls_FeeCod1 <> ' '
M200 C                   ADD       1             Cls1
M200 C                   MOVEL(P)  cls_FeeCod1   CODn(Cls1)
M200 C                   MOVEL(P)  cls_FeeAmt1   MINn(Cls1)
M200 C                   MOVEL(P)  DDCTYP        Curn(Cls1)
M200 C                   Z-ADD     1             ECC1              2 0
M200 C     'ECC'         LOOKUP    TX3CA(ECC1)                            11
M200 C                   IF        *IN11 = '1'
M200 C                   Z-ADD     ECC1          IDXn(Cls1)
M200 C                   MOVEL     TAMU(ECC1)    ECC1A             2
M200 C                   EVAL      VLEn(Cls1) = 'TLBF' + ECC1A
M200 C                   ELSE
M200 C                   EVAL      VLEn(Cls1) = *BLANK
M200 C                   ENDIF
M200 C                   ENDIF
     ‚* Charges 2(Half Yearly)
M200 C****               IF        cls_FeeCod2 <> ' '
M200 C****               ADD       1             Cls1
M200 C****               MOVEL(P)  cls_FeeCod2   CODn(Cls1)
M200 C****               MOVEL(P)  cls_FeeAmt2   MINn(Cls1)
M200 C****               ENDIF

M200 C                   IF        cls_FeeCod2 <> ' '
M200 C                   ADD       1             Cls1
M200 C                   MOVEL(P)  cls_FeeCod2   CODn(Cls1)
M200 C                   MOVEL(P)  cls_FeeAmt2   MINn(Cls1)
M200 C                   MOVEL(P)  DDCTYP        Curn(Cls1)
M200 C                   Z-ADD     1             ECC1              2 0
M200 C     'SV1'         LOOKUP    TX3CA(ECC1)                            11
M200 C                   IF        *IN11 = '1'
M200 C                   Z-ADD     ECC1          IDXn(Cls1)
M200 C                   MOVEL     TAMU(ECC1)    ECC1A             2
M200 C                   EVAL      VLEn(Cls1) = 'TLBF' + ECC1A
M200 C                   ELSE
M200 C                   EVAL      VLEn(Cls1) = *BLANK
M200 C                   ENDIF
M200 C                   ENDIF

     ‚* Move Back the Charges to existing array
M200 C                   Z-ADD     1             Cls1
M200 C                   IF        cls_FeeCod1 <> ' ' or cls_FeeCod2 <> ' '
M200 C                   Dow       Cls1 <= 5 and CODn(Cls1) <> ' '
M200 C                   SELECT
M200 C                   WHEN      T6TCHGCD1 = *BLANKS or T6TCHGCD1 = CODn(Cls1)
M200 C                   Z-ADD     IDXn(Cls1)    IDX1(PP2)
M200 C                   MOVEL(P)  CODn(Cls1)    T6TCHGCD1
M200 C                   MOVEL(P)  CODn(Cls1)    COD1(PP2)
M200 C                   MOVEL(P)  MINn(Cls1)    MIN1(PP2)
M200 C                   MOVEL(P)  VLEn(Cls1)    VLE1(PP2)
M200 C                   WHEN      T6TCHGCD2 = *BLANKS or T6TCHGCD2 = CODn(Cls1)
M200 C                   Z-ADD     IDXn(Cls1)    IDX2(PP2)
M200 C                   MOVEL(P)  CODn(Cls1)    T6TCHGCD2
M200 C                   MOVEL(P)  CODn(Cls1)    COD2(PP2)
M200 C                   MOVEL(P)  MINn(Cls1)    MIN2(PP2)
M200 C                   MOVEL(P)  VLEn(Cls1)    VLE2(PP2)
M200 C                   WHEN      T6TCHGCD3 = *BLANKS or T6TCHGCD3 = CODn(Cls1)
M200 C                   Z-ADD     IDXn(Cls1)    IDX3(PP2)
M200 C                   MOVEL(P)  CODn(Cls1)    T6TCHGCD3
M200 C                   MOVEL(P)  CODn(Cls1)    COD3(PP2)
M200 C                   MOVEL(P)  MINn(Cls1)    MIN3(PP2)
M200 C                   MOVEL(P)  VLEn(Cls1)    VLE3(PP2)
M200 C                   WHEN      T6TCHGCD4 = *BLANKS or T6TCHGCD4 = CODn(Cls1)
M200 C                   Z-ADD     IDXn(Cls1)    IDX4(PP2)
M200 C                   MOVEL(P)  CODn(Cls1)    T6TCHGCD4
M200 C                   MOVEL(P)  CODn(Cls1)    COD4(PP2)
M200 C                   MOVEL(P)  MINn(Cls1)    MIN4(PP2)
M200 C                   MOVEL(P)  VLEn(Cls1)    VLE4(PP2)
M200 C                   WHEN      T6TCHGCD5 = *BLANKS or T6TCHGCD5 = CODn(Cls1)
M200 C                   Z-ADD     IDXn(Cls1)    IDX5(PP2)
M200 C                   MOVEL(P)  CODn(Cls1)    T6TCHGCD5
M200 C                   MOVEL(P)  CODn(Cls1)    COD5(PP2)
M200 C                   MOVEL(P)  MINn(Cls1)    MIN5(PP2)
M200 C                   MOVEL(P)  VLEn(Cls1)    VLE5(PP2)
M200 C                   ENDSL
M200 C                   ADD       1             Cls1
M200 C                   ENDDO
M200 C                   ENDIF

M200 C                   ENDSR
     š**************************************************************************
M200  *‚Get Charge Amount from SSRTVCRG
M200 š**************************************************************************
M200 C     Get_CHGAMT    BEGSR
I300 C                   IF        TLAP(1) <> *Blanks and TLAP(1) <> 'DD' and
I300 C                             TLAP(1) <> 'LN' and TLAP(1) <> 'CD'
I300 C                   Eval      TLSAPP = TLAP(1)
I300 C                   ENDIF
     C
M200 C                   IF        COD1(XX) <> *BLANKS
M200 C                             AND MIN1(XX) = 0
M200 C                   MOVEL(P)  woACUR        wkACUR
M200 C                   MOVEL(P)  COD1(XX)      CHGTYP
M200 C                   CALLP(E)  SSRTVCRG(
M200 C                             TLCBKNO          :
M200 C                             TLSAPP           :
M200 C                             CHGTYP           :
M200 C*M200                        woACUR           :
M200 C                             wkACUR           :
M200 C                             SCTYPE           :
M200 C                             ACCTNO           :
M200 C                             ACTYPE           :
M200 C                             CFUSTF           :
M200 C                             CFSEGC           :
M200 C                             C_OTCAMT         :
M200 C                             C_OTCMMT         :
M200 C                             C_OTCONT         :
M200 C                             C_OTHTRN         :
M200 C                             C_OTIFCC         :
M200 C                             C_ERRORC         )
M200‚C                   IF        %ERROR
M200 C                   Z-ADD     *ZEROS        ERN
M200 C                   MOVE      *BLANKS       ERO
M200 C                   Z-ADD     251           ERN(1)
M200 C                   MOVE      'N'           ERO(1)
M200 C                   Eval      ADF(1) = 'SSRTVCRG Error'
M200 C                   EXSR      GENERR
M200 C                   LEAVESR
M200‚C                   ENDIF
     C
M200 C                   MOVEL(P)  C_OTCAMT      MIN1(XX)
M200 C                   MOVEL(P)  C_OTCMMT      MAX1(XX)
M200 C                   MOVEL(P)  C_OTCONT      LMT1(XX)
M200 C*M200              MOVEL(P)  woACUR        CUR1(XX)
M200 C                   MOVEL(P)  wKACUR        CUR1(XX)
M200 C                   ENDIF
M200 C                   IF        COD2(XX) <> *BLANKS
M200 C                             AND MIN2(XX) = 0
M200 C                   MOVEL(P)  woACUR        wkACUR
M200 C                   MOVEL(P)  COD2(XX)      CHGTYP
M200 C*                  CALLP     SSRTVCRG(TLCBKNO :
M200 C                   CALLP(E)  SSRTVCRG(TLCBKNO :
M200 C*M200                         TLSAPP : CHGTYP : woACUR :
M200 C                              TLSAPP : CHGTYP : wkACUR :
M200 C                              SCTYPE : ACCTNO : ACTYPE :
M200 C                              CFUSTF : CFSEGC : C_OTCAMT :
M200 C                              C_OTCMMT : C_OTCONT : C_OTHTRN :
M200 C                              C_OTIFCC : C_ERRORC)
M200‚C                   IF        %ERROR
M200 C                   Z-ADD     *ZEROS        ERN
M200 C                   MOVE      *BLANKS       ERO
M200 C                   Z-ADD     251           ERN(1)
M200 C                   MOVE      'N'           ERO(1)
M200 C                   Eval      ADF(1) = 'SSRTVCRG Error'
M200 C                   EXSR      GENERR
M200 C                   LEAVESR
M200‚C                   ENDIF
     C
M200 C                   MOVEL(P)  C_OTCAMT      MIN2(XX)
M200 C                   MOVEL(P)  C_OTCMMT      MAX2(XX)
M200 C                   MOVEL(P)  C_OTCONT      LMT2(XX)
M200 C*M200              MOVEL(P)  woACUR        CUR2(XX)
M200 C                   MOVEL(P)  wkACUR        CUR2(XX)
M200 C                   ENDIF
M200 C                   IF        COD3(XX) <> *BLANKS
M200 C                             AND MIN3(XX) = 0
M200 C                   MOVEL(P)  woACUR        wkACUR
M200 C                   MOVEL(P)  COD3(XX)      CHGTYP
M200 C*                  CALLP     SSRTVCRG(TLCBKNO :
M200 C                   CALLP(E)  SSRTVCRG(TLCBKNO :
M200 C*M200                         TLSAPP : CHGTYP : woACUR :
M200 C                              TLSAPP : CHGTYP : wkACUR :
M200 C                              SCTYPE : ACCTNO : ACTYPE :
M200 C                              CFUSTF : CFSEGC : C_OTCAMT :
M200 C                              C_OTCMMT : C_OTCONT : C_OTHTRN :
M200 C                              C_OTIFCC : C_ERRORC)
M200‚C                   IF        %ERROR
M200 C                   Z-ADD     *ZEROS        ERN
M200 C                   MOVE      *BLANKS       ERO
M200 C                   Z-ADD     251           ERN(1)
M200 C                   MOVE      'N'           ERO(1)
M200 C                   Eval      ADF(1) = 'SSRTVCRG Error'
M200 C                   EXSR      GENERR
M200 C                   LEAVESR
M200‚C                   ENDIF
     C
M200 C                   MOVEL(P)  C_OTCAMT      MIN3(XX)
M200 C                   MOVEL(P)  C_OTCMMT      MAX3(XX)
M200 C                   MOVEL(P)  C_OTCONT      LMT3(XX)
M200 C*M200              MOVEL(P)  woACUR        CUR3(XX)
M200 C                   MOVEL(P)  wkACUR        CUR3(XX)
M200 C                   ENDIF
M200 C                   IF        COD4(XX) <> *BLANKS
M200 C                             AND MIN4(XX) = 0
M200 C                   MOVEL(P)  woACUR        wkACUR
M200 C                   MOVEL(P)  COD4(XX)      CHGTYP
M200 C*                  CALLP     SSRTVCRG(TLCBKNO :
M200 C                   CALLP(E)  SSRTVCRG(TLCBKNO :
M200 C*M200                         TLSAPP : CHGTYP : woACUR :
M200 C                              TLSAPP : CHGTYP : wkACUR :
M200 C                              SCTYPE : ACCTNO : ACTYPE :
M200 C                              CFUSTF : CFSEGC : C_OTCAMT :
M200 C                              C_OTCMMT : C_OTCONT : C_OTHTRN :
M200 C                              C_OTIFCC : C_ERRORC)
M200‚C                   IF        %ERROR
M200 C                   Z-ADD     *ZEROS        ERN
M200 C                   MOVE      *BLANKS       ERO
M200 C                   Z-ADD     251           ERN(1)
M200 C                   MOVE      'N'           ERO(1)
M200 C                   Eval      ADF(1) = 'SSRTVCRG Error'
M200 C                   EXSR      GENERR
M200 C                   LEAVESR
M200‚C                   ENDIF
     C
M200 C                   MOVEL(P)  C_OTCAMT      MIN4(XX)
M200 C                   MOVEL(P)  C_OTCMMT      MAX4(XX)
M200 C                   MOVEL(P)  C_OTCONT      LMT4(XX)
M200 C*M200              MOVEL(P)  woACUR        CUR4(XX)
M200 C                   MOVEL(P)  wkACUR        CUR4(XX)
M200 C                   ENDIF
M200 C                   IF        COD5(XX) <> *BLANKS
M200 C                             AND MIN5(XX) = 0
M200 C                   MOVEL(P)  woACUR        wkACUR
M200 C                   MOVEL(P)  COD5(XX)      CHGTYP
M200 C*                  CALLP     SSRTVCRG(TLCBKNO :
M200 C                   CALLP(E)  SSRTVCRG(TLCBKNO :
M200 C*M200                         TLSAPP : CHGTYP : woACUR :
M200 C                              TLSAPP : CHGTYP : wkACUR :
M200 C                              SCTYPE : ACCTNO : ACTYPE :
M200 C                              CFUSTF : CFSEGC : C_OTCAMT :
M200 C                              C_OTCMMT : C_OTCONT : C_OTHTRN :
M200 C                              C_OTIFCC : C_ERRORC)
M200‚C                   IF        %ERROR
M200 C                   Z-ADD     *ZEROS        ERN
M200 C                   MOVE      *BLANKS       ERO
M200 C                   Z-ADD     251           ERN(1)
M200 C                   MOVE      'N'           ERO(1)
M200 C                   Eval      ADF(1) = 'SSRTVCRG Error'
M200 C                   EXSR      GENERR
M200 C                   LEAVESR
M200‚C                   ENDIF
     C
M200 C                   MOVEL(P)  C_OTCAMT      MIN5(XX)
M200 C                   MOVEL(P)  C_OTCMMT      MAX5(XX)
M200 C                   MOVEL(P)  C_OTCONT      LMT5(XX)
M200 C*M200              MOVEL(P)  woACUR        CUR5(XX)
M200 C                   MOVEL(P)  wkACUR        CUR5(XX)
M200 C                   ENDIF
M200 C                   EndSr
     š**************************************************************************
M200  *‚Get_ACCTINFO
M200 š**************************************************************************
M200 C     Get_ACCTINFO  BEGSR

M200˜C                   SELECT
M200˜C                   WHEN      wiACTYPE = 'D' OR wiACTYPE = 'S'
M200˜C                              OR wiACTYPE = 'X'
M200 C     Acckey        Chain     DDmast                             39
M200 C                   If        Not %Found(Ddmast)
M200 C     Acckey        Chain     DDtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     DDmemo                             38
M200 C                   If        *IN39 = '0'
M200 C                   Eval      T6TUCLM  = 'N'
M200 C                   Eval      T6TODFAC = 'N'
M200 C                   EVAL      T6TAFFAC = DDTFAC
M200 C                   EVAL      T6TAACTYP= DDTFAT
M200 C                   EVAL      T6TBRN   = BRANCH
M200 C                   EVAL      T6TBNK   = BANKNO
M200 C                   EVAL      T6TAPRD  = SCCODE
M200 C                   EVAL      T6TBKTYP = DDSPTF
M200 C                   EVAL      T6TACCUR = DDCTYP
     C                   IF        COMACT = 'Y'
M200 C                   EVAL      woACUR   = SSICUR
     C                   Else
M200 C                   EVAL      woACUR   = DDCTYP
     C                   ENDIF
M200 C                   IF        DORSTS = 'U'
M200 C                   EVAL      T6TUCLM  = 'Y'
M200 C                   ENDIF
M200 C                   EVAL      TLSAPP      = 'DD'
M200 C                   EVAL      T6TSTAT  = STATUS
M200 C                   IF        TLRINQ = 'C'
M200 C                   EVAL      T6TSTAT  = 2
M200 C                   ENDIF
     C                   Eval      T6TAVBAL = COLECT - HOLD
M200 C                   SUB       OBAL          T6TAVBAL
M200 C                   IF        ODPROT = 'Y'
M200 C                   EVAL      T6TODFAC = 'Y'
M200 C*                  CALLP     LL1113(ACCTNO : ACTYPE :
M200 C                   CALLP(E)  LL1113(ACCTNO : ACTYPE :
M200 C                              L_ODDLIM : L_ODCBAL : L_PAYOFF :
M200 C                              L_AUTLIM : C_RUNOPT : C_ERRORC)
M200‚C                   IF        %ERROR
M200 C                   Z-ADD     *ZEROS        ERN
M200 C                   MOVE      *BLANKS       ERO
M200 C                   Z-ADD     251           ERN(1)
M200 C                   MOVE      'N'           ERO(1)
M200 C                   Eval      ADF(1) = 'LL1113 Error'
M200 C                   EXSR      GENERR
M200 C                   LEAVESR
M200‚C                   ENDIF
     C
M200 C                   ADD       L_ODDLIM      T6TAVBAL
M200 C                   ENDIF
M200 C                   Eval      T6TCBAL  = CBAL
M200 C                   ENDIF
      *
M200˜C                   WHEN      wiACTYPE = 'B'
M200 C     Acckey        Chain     SDmast                             39
M200 C                   If        Not %Found(SDmast)
M200 C     Acckey        Chain     SDtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     SDmemo                             38
M200 C                   If        *IN39 = '0'
M200 C                   EVAL      T6TAFFAC = SD_CHGACT
M200 C                   EVAL      T6TAACTYP= SD_CHGTYP
M200 C                   EVAL      T6TBRN   = SD_BRANCH
M200 C                   EVAL      T6TBNK   = SD_BANK
M200 C                   EVAL      T6TAPRD  = SD_BOXTYP
M200 C                   EVAL      T6TBKTYP = SD_SDSPTF
M200 C                   EVAL      T6TACCUR = SD_SDCTYP
M200 C                   EVAL      woACUR   = SD_SDCTYP
M200 C                   EVAL      TLSAPP      = 'SD'
M200 C                   MOVE      SD_LBSTAT     T6TSTAT
M200 C                   ENDIF
      *
M200˜C                   WHEN      wiACTYPE = 'T'
M200 C                   Z-Add     TLF(PP1)      wiACCTNO
M200 ‚* Search for CD Group
M200 C     Acckey        Chain     CDGMST                             39
M200 C                   IF        *IN39 = '0'
M200 C                   EVAL      T6TSTAT  = CGUSTS
M200 C                   EVAL      T6TBRN   = CGBRAN
M200 C                   EVAL      T6TBNK   = CGBANK
M200 C                   EVAL      T6TAPRD  = 'TD GROUP'
M200 C                   EVAL      T6TBKTYP = CGICTL
M200 C                   Eval      T6TAVBAL = *Zeros
M200 C                   Eval      T6TCBAL  = CGGBAL
M200 C                   EVAL      T6TACCUR = CGCURC
M200 C                   EVAL      woACUR   = CGCURC
M200 C                   EVAL      ZZCDGRP  = 'Y'
M200 C                   EVAL      TLSAPP      = 'CD'
M200 C                   Else
M200 ‚* Search for CD cert no
M200 C     Acckey        Chain     CDmast                             39
M200 C                   If        Not %Found(Cdmast)
M200 C     Acckey        Chain     CDtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     CDmemo                             38
M200 C                   EVAL      TLSAPP      = 'CD'
M200 C                   If        *IN39 = '0'
M200 C                   EVAL      T6TSTAT  = STATUS
M200 C                   IF        TLRINQ = 'C'
M200 C                   EVAL      T6TSTAT  = 2
M200 C                   ENDIF
M200 C                   EVAL      T6TBRN   = BRN
M200 C                   EVAL      T6TBNK   = BANKNO
M200 C                   EVAL      T6TAPRD  = TYPE
M200 C                   EVAL      T6TBKTYP = CDSPTF
M200 C                   Eval      T6TAVBAL = COLECT - HOLD
M200 C                   Eval      T6TCBAL  = CBAL
M200 C                   EVAL      T6TACCUR = CURTYP
M200 C                   EVAL      woACUR   = CURTYP
M200 C                   Z-ADD     ACCTNO        T6TACTNO
M200 C                   MOVE      ACTYPE        T6TACTYP
M200 C                   MOVEL(P)  CDPSBUC       T6TSBU
M200 C                   Endif
M200 C                   Endif
      *
M200˜C                   WHEN      wiACTYPE = 'L'
M200 C                   Z-Add     TLF(PP1)      wiACCTNO
M200 C     Acckey        Chain     LNmast                             39
M200 C                   If        Not %Found(LNmast)
M200 C     Acckey        Chain     LNtnew                             39
M200 C                   Endif
M200 C     Acckey        Chain     LNmemo                             38
M200 C                   If        *IN39 = '0'
M200 C                   EVAL      T6TSTAT  = STATUS
M200 C                   EVAL      T6TTRNCH = ACTDDD
M200 C                   EVAL      T6TLNSOLD= *BLANKS
M200 C                   EVAL      T6TBRN   = BRN
M200 C                   EVAL      T6TBNK   = BKN
M200 C                   EVAL      T6TAPRD  = TYPE
M200 C                   EVAL      T6TNPL   = NPLFLG
M200 C                   EVAL      T6TBKTYP = LNSPTF
M200 C                   EVAL      T6TACCUR = CURTYP
M200 C                   EVAL      woACUR   = CURTYP
M200 C                   Z-ADD     ACCTNO        T6TACTNO
M200 C                   MOVE      ACTYPE        T6TACTYP
M200 C
M200 C     NSPDT8        IFEQ      NEXTD7
M200 C     NSIPD8        OREQ      NEXTD7
M200 C     NSPDT8        OREQ      MATDT8
M200 C     NEXTD7        ANDGT     MATDT8
M200 C                   Z-ADD     BILINT        wIntOs
M200 C                   ELSE
M200 C                   Z-ADD     BILINO        wIntOs
M200 C                   ENDIF
M200 C                   Eval      T6TAVBAL = (CBAL+ASSLC+PAIDLC+MISCD+OTHCHG
M200 C                                        +wIntOs-ADVPMT+MEMAMT)
M200 C                   Eval      T6TCBAL  = CBAL
M200 C                   Eval      T6TWOFF  = 'N'
M200 C                   If        PWOFID = '8' OR PWOFID = 'O'
M200 C                   EVAL      T6TWOFF  = 'Y'
M200 C                   Endif
M200 C                   EVAL      TLSAPP      = 'LN'
M200 C                   Endif

M200˜C                   WHEN      wiACTYPE = 'U'
M200 C     Acckey        Chain     UTmast                             39
M200 C                   If        *IN39 = '0'
M200 C                   EVAL      T6TAFFAC = ut_CRDACN
M200 C                   EVAL      T6TAACTYP= ut_CRDATP
M200 C                   EVAL      T6TBRN   = ut_BRANCH
M200 C                   EVAL      T6TBNK   = ut_BANK
M200 C                   EVAL      T6TAPRD  = ut_UTTYPE
M200 C                   EVAL      T6TBKTYP = *Blank
M200 C                   EVAL      T6TACCUR = ut_CURTYP
M200 C                   EVAL      woACUR   = ut_CURTYP
M200 C                   EVAL      TLSAPP      = 'UT'
M200 C                   EVAL      T6TSTAT  = ut_STATUS
M200 C                   ENDIF

M200˜C                   ENDSL
M200 C                   EndSr
M200 š**************************************************************************
M200  *‚Get_ACCTIBG - Get Account IBG
M200 š**************************************************************************
M200 C     Get_ACCTIBG   BEGSR

M200 C                   EVAL      P3TXTP = '*IBG'
M200 C     TRXTKY        Chain     RDDTRXT
M200 C                   IF        %Found(DDTRXTL1)
M200 C                   EVAL      T6TIBGCT = TRXCNT
M200 C                   ELSEIF    Not %Found(DDTRXTL1) AND DDRCO5 <> 'Y'
M200 C                   EVAL      T6TIBGCT = 99999
M200 C                   ENDIF

M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessD2 - Process to response for D2
M200 š**************************************************************************
M200 C     srProcessD2   BEGSR
M200 C                   Z-ADD     1             COUNTR
M200 C                   Z-ADD     1             COUNTR1
M200 C                   If        TLAP(COUNTR1) = ' '
M200 C                   DOW       (COUNTR1 <= CMAX1)
M200 C                   Z-ADD     COUNTR        PP1               2 0
M200 C                   Z-ADD     COUNTR1       PP2               2 0
M200 C                   If        TLF(PP1) > 0
M200 C                   EXSR      TMQD2GEN
M200 C                   Endif
M200 C                   ADD       2             COUNTR
M200 C                   ADD       1             COUNTR1
M200 C                   ENDDO
M200 C                   ELSE
M200 C                   Z-ADD     COUNTR        PP1
M200 C                   Z-ADD     COUNTR1       PP2
M200 C                   If        TLF(PP1) > 0
M200 C                   Z-ADD     COUNTR1       PP2
M200 C                   EXSR      TMQD2GEN
M200 C                   Endif
M200 C                   Endif
M200 C                   ENDSR
M200 š**************************************************************************
M200  *‚srProcessT0 - Process to get charge type for Close acct trx
M200 š**************************************************************************
M200 C     srProcessT0   BEGSR
M200 C                   IF        TLXUFD <> *BLANKS
M200 C                   Z-ADD     1             XX                2 0
M200 C
M200 C                   If        TLAP(XX) = ' '
M200 C                   DOW       XX <= CMAX1
M200 C                   EXSR      Get_CHGAMT
M200 C                   IF        ERN(1) = 251  AND  ERO(1) = 'N'
M200 C                   LEAVESR
M200 C                   ENDIF
M200 C                   ADD       1             XX
M200 C                   ENDDO
M200 C                   ELSE
M200 C                   EXSR      Get_CHGAMT
M200 C                   ENDIF
M200 C                   ENDIF
M200 C
M200 C                   ENDSR
     š**************************************************************************
      *‚srInitLst - Initialise Output Fields for TMSGTACTN Parameter List
     š**************************************************************************
      *
     C     srInitLst     BEGSR
      *
     C                   Eval      woACUR = *Blanks
     C                   Eval      wkACUR = *Blanks
     C                   Eval      woCFANA1 = *Blanks
     C                   Eval      woCFANA2 = *Blanks
     C                   Eval      woCFANA3 = *Blanks
     C                   Eval      woCFANA4 = *Blanks
     C                   Eval      woCFANA5 = *Blanks
     C                   Eval      woACBK   = 0
     C                   Eval      woACBRN  = 0
     C                   Eval      woSTAT   = *Blanks
     C                   Eval      woCCTL   = *Blanks
     C                   Eval      woSPTF   = *Blanks
     C                   Eval      woPBOK   = *Blanks
     C                   Eval      woSTMT   = *Blanks
     C                   Eval      woSTMPAS = *Blanks
     C                   Eval      woPROD   = *Blanks
     C                   Eval      woAVLBAL = 0
     C                   Eval      woCBAL   = 0
     C                   Eval      woSTAFF  = *Blanks
     C                   Eval      woBENE   = *Blanks
     C                   Eval      woERR    = *Blanks
     C                   Eval      woERRN   = 0
     C                   Eval      wCFSNME  = *BLANKs
      *
     C                   ENDSR
      *
     š**************************************************************************
      *‚srInit    - Initialise array for T8
     š**************************************************************************
M200 C     srInit        BEGSR
M200 C                   MOVEA     *ZEROS        ACTN
M200 C                   MOVEA     *BLANKS       ATYE
M200 C                   MOVEA     *ZEROS        IDX1
M200 C                   MOVEA     *BLANKS       COD1
M200 C                   MOVEA     *ZEROS        MIN1
M200 C                   MOVEA     *ZEROS        MAX1
M200 C                   MOVEA     *BLANKS       CUR1
M200 C                   MOVEA     *ZEROS        LMT1
M200 C                   MOVEA     *BLANKS       FLD1
M200 C                   MOVEA     *BLANKS       VLE1
M200 C                   MOVEA     *ZEROS        IDX2
M200 C                   MOVEA     *BLANKS       COD2
M200 C                   MOVEA     *ZEROS        MIN2
M200 C                   MOVEA     *ZEROS        MAX2
M200 C                   MOVEA     *BLANKS       CUR2
M200 C                   MOVEA     *ZEROS        LMT2
M200 C                   MOVEA     *BLANKS       FLD2
M200 C                   MOVEA     *BLANKS       VLE2
M200 C                   MOVEA     *ZEROS        IDX3
M200 C                   MOVEA     *BLANKS       COD3
M200 C                   MOVEA     *ZEROS        MIN3
M200 C                   MOVEA     *ZEROS        MAX3
M200 C                   MOVEA     *BLANKS       CUR3
M200 C                   MOVEA     *ZEROS        LMT3
M200 C                   MOVEA     *BLANKS       FLD3
M200 C                   MOVEA     *BLANKS       VLE3
M200 C                   MOVEA     *ZEROS        IDX4
M200 C                   MOVEA     *BLANKS       COD4
M200 C                   MOVEA     *ZEROS        MIN4
M200 C                   MOVEA     *ZEROS        MAX4
M200 C                   MOVEA     *BLANKS       CUR4
M200 C                   MOVEA     *ZEROS        LMT4
M200 C                   MOVEA     *BLANKS       FLD4
M200 C                   MOVEA     *BLANKS       VLE4
M200 C                   MOVEA     *ZEROS        IDX5
M200 C                   MOVEA     *BLANKS       COD5
M200 C                   MOVEA     *ZEROS        MIN5
M200 C                   MOVEA     *ZEROS        MAX5
M200 C                   MOVEA     *BLANKS       CUR5
M200 C                   MOVEA     *ZEROS        LMT5
M200 C                   MOVEA     *BLANKS       FLD5
M200 C                   MOVEA     *BLANKS       VLE5
M200 C                   MOVEA     *ZEROS        IDXn
M200 C                   MOVEA     *BLANKS       CODn
M200 C                   MOVEA     *ZEROS        MINn
M200 C                   MOVEA     *ZEROS        MAXn
M200 C                   MOVEA     *ZEROS        LMTn
M200 C                   MOVEA     *BLANKS       FLDn
M200 C                   MOVEA     *BLANKS       VLEn
M200 C                   ENDSR
tmpbpš**************************************************************************
      *‚srT6TMPRSP  - Temp Response for OD account not found in LN master file
     š**************************************************************************
     C     srT6TMPRSP    BEGSR
     C
M200 C                   Eval      wRSPCOD = T6RSPCOD
M200 C                   Eval      wRSPLEN = T6RSPLEN
M200 C                   CLEAR                   TMQT6
M200 C                   Eval      T6RSPCOD = wRSPCOD
M200 C                   Eval      T6RSPLEN = wRSPLEN

     C                   Z-ADD     wiACCTNO      T6TACTNO
     C                   MOVE      wiACTYPE      T6TACTYP
     C                   EVAL      T6TACNM1 = '*INVALID'

     C                   MOVEL     'N'           QIGNORE
     C                   MOVEL(P)  TMQT6         OUTBUFF
     C                   MOVEL     *BLANKS       QEOM
     C                   EXSR      srSend
      *
     C                   ENDSR
     š**************************************************************************
      *‚srSend - Send Message back to Response Data Queue
     š**************************************************************************
     C     srSend        BEGSR
      *
     C                   MOVEL     OUTBUFF       ICDATA
     C                   MOVEL     QHEAD         ICHEAD
     C                   MOVEL     QEOM          ICEOM
     C                   MOVEL     QIGNORE       ICIGNORE
     C                   CALLB     'TMSSEND'
     C                   PARM                    ICFDS
     C                   PARM                    ICIGNORE
     C                   PARM                    ICDPGM
     C                   PARM                    ICDJOB
     C                   PARM                    TLBTXREF
     C                   PARM                    TLBID
     C                   PARM                    FRWTRX            1
     C                   PARM                    TLBSEQ
      *
     C                   ENDSR
     š**************************************************************************
M200  *‚Generr - Generate Error and call TMQ42GEN to avoid Good Response returne
     š**************************************************************************
M200 C     Generr        BEGSR
      *
M200 C                   MOVEL     'C'           ICIGNORE          1
M200 C                   MOVEL     QHEAD         ICHEAD
M200 C                   MOVEL     QEOM          ICEOM
M200 C                   MOVEL     ICDPGM        PGM_NAME         10
M200 C                   MOVEL     JOB           JOB_NAME         10
M200
M200 C                   CALLB     'TMSSEND'
M200 C                   PARM                    ICFDS
M200 C                   PARM                    ICIGNORE
M200 C                   PARM                    ICDPGM
M200 C                   PARM                    ICDJOB
M200 C                   PARM                    TLBTXREF
M200 C                   PARM                    TLBID
M200 C                   PARM                    FRWTRX            1
M200 C                   PARM                    TLBSEQ

M200 C                   MOVE      'N'           HOVREQ            1
M200 C                   MOVE      'N'           ERO(1)
M200 C                   CLEAR                   APL
M200 C                   Z-ADD     1             APL(1)
M200 C                   CLEAR                   APT
M200 C                   MOVE      ACTYPE        APT(1)
M200
M200 C                   MOVEL     ' '           ICIGNORE          1
M200 C                   MOVEL     QHEAD         ICHEAD
M200 C                   MOVEL     QEOM          ICEOM
M200 C                   MOVEL     ICDPGM        PGM_NAME         10
M200 C                   MOVEL     JOB           JOB_NAME         10

     C                   EXSR      TMQ42GEN
M200 C                   ENDSR
      **************************************************************************
      *  COPYBOOKS
      **************************************************************************
      *
      * Move input fields to array for handler
     C/COPY QTLSREFRLE,TMQMFTOa

      * Load TLEDT file
     C/COPY QTLSREFRLE,TMQLDEDT

      * Move fields to log file names
     C/COPY QTLSREFRLE,TMQMICML

      * Write 42 error subroutines
     C/COPY QTLSREFRLE,TMQ42GEN
     C/COPY QTLSREFRLE,TMQ42GN1
      *
     C/COPY QTLSREFRLE,TMQ99GEN
     C/COPY QTLSREFRLE,TLPSMSCHD1
SS02 C/COPY QTLSREFRLE,TMQGTTIM
M200 C/COPY QTLSCOPY,TMQT8GEN
M200 C/COPY QTLSCOPY,TMQV4GEN
M200 C/COPY QTLSCOPY,TMQTAGEN
M200 C/COPY QTLSCOPY,TMQT7GEN
M200 C/COPY QTLSCOPY,TMQTBGEN
M200 C/COPY QTLSCOPY,TMQTCGEN
M200 C/COPY QTLSREFRLE,TMQD2GEN
M200 C/COPY QTLSCOPY,TMQT0GEN
M300 C/COPY QTLSCOPY,TMQ1BGEN
      **************************************************************************
